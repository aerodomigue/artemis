name: Build Artemis Qt

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  QT_VERSION: '6.8.3'

jobs:
  build-windows:
    name: Windows Build
    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia'
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Build
      run: |
        $env:PATH += ";$env:Qt6_DIR\bin"
        qmake6 moonlight-qt.pro CONFIG+=release
        nmake
    
    - name: Package Windows Build
      run: |
        mkdir windows-package
        copy app\release\moonlight.exe windows-package\
        Compress-Archive -Path windows-package\* -DestinationPath artemis-windows.zip
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-windows
        path: artemis-windows.zip

  build-windows-arm64:
    name: Windows ARM64 Build
    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup Qt Desktop (required for ARM64)
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia'
        
    - name: Setup Qt for ARM64
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_arm64'
    
    - name: Build
      run: |
        $env:PATH += ";$env:Qt6_DIR\bin"
        qmake6 moonlight-qt.pro CONFIG+=release
        nmake
    
    - name: Package Windows ARM64 Build
      run: |
        mkdir windows-arm64-package
        copy app\release\moonlight.exe windows-arm64-package\
        Compress-Archive -Path windows-arm64-package\* -DestinationPath artemis-windows-arm64.zip
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-windows-arm64
        path: artemis-windows-arm64.zip

  build-macos:
    name: macOS Build
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'mac'
        target: 'desktop'
        modules: 'qtmultimedia'
    
    - name: Install dependencies
      run: |
        brew install create-dmg ffmpeg opus sdl2 sdl2_ttf
    
    - name: Clean any existing build
      run: |
        rm -f .qmake.stash .qmake.cache
        find . -name "Makefile*" -delete
        # Clean submodule build artifacts
        rm -rf moonlight-common-c/Makefile* moonlight-common-c/.qmake.stash
        rm -rf qmdnsengine/Makefile* qmdnsengine/.qmake.stash 
        rm -rf h264bitstream/Makefile* h264bitstream/.qmake.stash
        rm -rf soundio/Makefile* soundio/.qmake.stash
        rm -rf app/Makefile* app/.qmake.stash
    
    - name: Build
      run: |
        export PATH="$Qt6_DIR/bin:$PATH"
        export QMAKE="$Qt6_DIR/bin/qmake6"
        qmake6 moonlight-qt.pro CONFIG+=release CONFIG+=sdk_no_version_check
        make -j$(sysctl -n hw.ncpu)
    
    - name: Package macOS Build
      run: |
        tar -czf artemis-macos.tar.gz -C app Moonlight.app
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-macos
        path: artemis-macos.tar.gz

  build-linux:
    name: Linux Build
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        modules: 'qtmultimedia'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libegl1-mesa-dev libgl1-mesa-dev libopus-dev libsdl2-dev \
          libsdl2-ttf-dev libssl-dev libavcodec-dev libavformat-dev \
          libswscale-dev libva-dev libvdpau-dev libxkbcommon-dev \
          wayland-protocols libdrm-dev nasm libgbm-dev \
          libfreetype6-dev libasound2-dev libdbus-1-dev \
          libgles2-mesa-dev libglu1-mesa-dev libibus-1.0-dev \
          libpulse-dev libudev-dev libx11-dev libxcursor-dev \
          libxext-dev libxi-dev libxinerama-dev libxrandr-dev \
          libxss-dev libxt-dev libxv-dev libxxf86vm-dev \
          libxcb-dri3-dev libx11-xcb-dev
    
    - name: Clean any existing build
      run: |
        rm -f .qmake.stash .qmake.cache
        find . -name "Makefile*" -delete
        # Clean submodule build artifacts
        rm -rf moonlight-common-c/Makefile* moonlight-common-c/.qmake.stash
        rm -rf qmdnsengine/Makefile* qmdnsengine/.qmake.stash 
        rm -rf h264bitstream/Makefile* h264bitstream/.qmake.stash
        rm -rf app/Makefile* app/.qmake.stash
    
    - name: Build
      run: |
        export PATH="$Qt6_DIR/bin:$PATH"
        export QMAKE="$Qt6_DIR/bin/qmake6"
        qmake6 moonlight-qt.pro CONFIG+=release
        make -j$(nproc)
    
    - name: Package Linux Build
      run: |
        tar -czf artemis-linux.tar.gz -C app moonlight
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-linux
        path: artemis-linux.tar.gz

  build-appimage:
    name: AppImage Build
    runs-on: ubuntu-20.04  # Use older Ubuntu for better compatibility
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        modules: 'qtmultimedia'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libegl1-mesa-dev libgl1-mesa-dev libopus-dev libsdl2-dev \
          libsdl2-ttf-dev libssl-dev libavcodec-dev libavformat-dev \
          libswscale-dev libva-dev libvdpau-dev libxkbcommon-dev \
          wayland-protocols libdrm-dev nasm libgbm-dev \
          libfreetype6-dev libasound2-dev libdbus-1-dev \
          libgles2-mesa-dev libglu1-mesa-dev libibus-1.0-dev \
          libpulse-dev libudev-dev libx11-dev libxcursor-dev \
          libxext-dev libxi-dev libxinerama-dev libxrandr-dev \
          libxss-dev libxt-dev libxv-dev libxxf86vm-dev \
          libxcb-dri3-dev libx11-xcb-dev file wget
    
    - name: Build
      run: |
        export PATH="$Qt6_DIR/bin:$PATH"
        qmake6 moonlight-qt.pro CONFIG+=release
        make -j$(nproc)
    
    - name: Create AppImage
      run: |
        # Download linuxdeploy and Qt plugin
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy*.AppImage
        
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        cp app/moonlight AppDir/usr/bin/artemis
        
        # Create desktop file
        mkdir -p AppDir/usr/share/applications
        cat > AppDir/usr/share/applications/artemis.desktop << EOF
        [Desktop Entry]
        Name=Artemis
        Comment=Game streaming client for Apollo/Sunshine
        Exec=artemis
        Icon=artemis
        Terminal=false
        Type=Application
        Categories=Game;Network;
        EOF
        
        # Create icon (placeholder - you'll want to replace with actual Artemis icon)
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        cp app/res/artemis.svg AppDir/usr/share/icons/hicolor/256x256/apps/artemis.svg
        
        # Build AppImage
        export QML_SOURCES_PATHS=app/gui
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt --output appimage
        
        # Rename to artemis
        mv Artemis*.AppImage artemis-linux.AppImage
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-appimage
        path: artemis-linux.AppImage

  build-flatpak:
    name: Flatpak Build
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup Flatpak
      run: |
        sudo apt-get update
        sudo apt-get install -y flatpak flatpak-builder
        sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        sudo flatpak install -y flathub org.freedesktop.Platform//23.08 org.freedesktop.Sdk//23.08 org.kde.Platform//6.6 org.kde.Sdk//6.6
    
    - name: Create Flatpak manifest
      run: |
        cat > com.artemis.Artemis.yml << EOF
        app-id: com.artemis.Artemis
        runtime: org.kde.Platform
        runtime-version: '6.6'
        sdk: org.kde.Sdk
        command: artemis
        finish-args:
          - --share=ipc
          - --socket=x11
          - --socket=wayland
          - --socket=pulseaudio
          - --device=all
          - --share=network
          - --filesystem=home
        modules:
          - name: artemis
            buildsystem: qmake
            config-opts:
              - CONFIG+=release
            sources:
              - type: dir
                path: .
        EOF
    
    - name: Build Flatpak
      run: |
        flatpak-builder --force-clean --repo=repo build-dir com.artemis.Artemis.yml
        flatpak build-bundle repo artemis.flatpak com.artemis.Artemis
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-flatpak
        path: artemis.flatpak

  build-steamdeck:
    name: Steam Deck Build
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        modules: 'qtmultimedia'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libegl1-mesa-dev libgl1-mesa-dev libopus-dev libsdl2-dev \
          libsdl2-ttf-dev libssl-dev libavcodec-dev libavformat-dev \
          libswscale-dev libva-dev libvdpau-dev libxkbcommon-dev \
          wayland-protocols libdrm-dev nasm libgbm-dev \
          libfreetype6-dev libasound2-dev libdbus-1-dev \
          libgles2-mesa-dev libglu1-mesa-dev libibus-1.0-dev \
          libpulse-dev libudev-dev libx11-dev libxcursor-dev \
          libxext-dev libxi-dev libxinerama-dev libxrandr-dev \
          libxss-dev libxt-dev libxv-dev libxxf86vm-dev \
          libxcb-dri3-dev libx11-xcb-dev
    
    - name: Build for Steam Deck
      run: |
        export PATH="$Qt6_DIR/bin:$PATH"
        # Configure for Steam Deck specific optimizations
        qmake6 moonlight-qt.pro CONFIG+=release CONFIG+=embedded CONFIG+=gpuslow
        make -j$(nproc)
    
    - name: Create Steam Deck Package
      run: |
        mkdir -p steamdeck-package
        cp app/moonlight steamdeck-package/artemis
        
        # Create desktop file for Steam Deck
        cat > steamdeck-package/artemis.desktop << EOF
        [Desktop Entry]
        Name=Artemis
        Comment=Game streaming client for Apollo/Sunshine
        Exec=artemis
        Icon=artemis
        Terminal=false
        Type=Application
        Categories=Game;Network;
        EOF
        
        # Create installation script
        cat > steamdeck-package/install.sh << 'EOF'
        #!/bin/bash
        # Artemis Steam Deck Installation Script
        
        INSTALL_DIR="$HOME/.local/share/artemis"
        DESKTOP_DIR="$HOME/.local/share/applications"
        
        echo "Installing Artemis for Steam Deck..."
        
        # Create directories
        mkdir -p "$INSTALL_DIR"
        mkdir -p "$DESKTOP_DIR"
        
        # Copy binary
        cp artemis "$INSTALL_DIR/"
        chmod +x "$INSTALL_DIR/artemis"
        
        # Install desktop file
        sed "s|Exec=artemis|Exec=$INSTALL_DIR/artemis|g" artemis.desktop > "$DESKTOP_DIR/artemis.desktop"
        
        echo "Installation complete!"
        echo "You can now add Artemis as a non-Steam game in Steam."
        EOF
        chmod +x steamdeck-package/install.sh
        
        tar -czf artemis-steamdeck.tar.gz -C steamdeck-package .
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-steamdeck
        path: artemis-steamdeck.tar.gz


  release:
    name: Create Release
    if: github.event_name == 'release'
    needs: [build-windows, build-macos, build-linux, build-appimage, build-flatpak, build-steamdeck]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/artemis-windows/*
          artifacts/artemis-macos/*
          artifacts/artemis-linux/*
          artifacts/artemis-appimage/*
          artifacts/artemis-flatpak/*
          artifacts/artemis-steamdeck/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
