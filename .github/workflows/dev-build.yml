name: Development Build

on:
  push:
    branches: 
      - develop
      - dev
      - 'feature/**'
      - 'feat/**'
  workflow_dispatch:  # Allow manual triggering

env:
  QT_VERSION: '6.8.1'

jobs:
  setup-version:
    name: Setup Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      numeric_version: ${{ steps.version.outputs.numeric_version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for proper versioning
      
      - name: Generate semantic version
        id: version
        run: |
          # Base version from app/version.txt
          BASE_VERSION=$(cat app/version.txt | tr -d '\n\r')
          
          # Get branch info
          BRANCH_NAME="${{ github.ref_name }}"
          BRANCH_SANITIZED=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
          
          # Get commit info
          COMMIT_SHORT="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHORT:0:7}"
          
          # Get timestamp info
          TIMESTAMP=$(date +"%Y%m%d")
          BUILD_NUMBER=$(date +"%H%M")
          
          # Determine if this is a prerelease
          IS_PRERELEASE="true"
          PRERELEASE_SUFFIX=""
          
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
            # Main branch = stable release
            VERSION="$BASE_VERSION"
            IS_PRERELEASE="false"
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            # Develop branch = development prerelease
            VERSION="$BASE_VERSION-dev.$TIMESTAMP.$BUILD_NUMBER+$COMMIT_SHORT"
            PRERELEASE_SUFFIX="dev"
          elif [[ "$BRANCH_NAME" =~ ^(feature|feat)/ ]]; then
            # Feature branch = feature prerelease
            FEATURE_NAME=$(echo "$BRANCH_NAME" | sed 's|^.*/||' | sed 's/[^a-zA-Z0-9._-]/-/g')
            VERSION="$BASE_VERSION-feature.$FEATURE_NAME.$TIMESTAMP.$BUILD_NUMBER+$COMMIT_SHORT"
            PRERELEASE_SUFFIX="feature"
          elif [[ "$BRANCH_NAME" =~ ^(hotfix|fix)/ ]]; then
            # Hotfix branch = hotfix prerelease
            VERSION="$BASE_VERSION-hotfix.$TIMESTAMP.$BUILD_NUMBER+$COMMIT_SHORT"
            PRERELEASE_SUFFIX="hotfix"
          else
            # Other branches = alpha prerelease
            VERSION="$BASE_VERSION-alpha.$BRANCH_SANITIZED.$TIMESTAMP.$BUILD_NUMBER+$COMMIT_SHORT"
            PRERELEASE_SUFFIX="alpha"
          fi
          
          # Create numeric version for Windows RC files (extract major.minor.patch + build number)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          NUMERIC_VERSION="$MAJOR.$MINOR.$PATCH.$BUILD_NUMBER"
          
          # Output all versions
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "numeric_version=$NUMERIC_VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Generated versions:"
          echo "  Semantic Version: $VERSION"
          echo "  Numeric Version: $NUMERIC_VERSION"
          echo "  Is Prerelease: $IS_PRERELEASE"
          echo "  Branch: $BRANCH_NAME"
  build-windows-dev:
    name: Windows Development Build
    needs: setup-version
    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0  # Needed for version info
    
    - name: Display version info
      run: |
        echo "Using semantic version: ${{ needs.setup-version.outputs.version }}"
        echo "Using numeric version: ${{ needs.setup-version.outputs.numeric_version }}"
        echo "Is prerelease: ${{ needs.setup-version.outputs.is_prerelease }}"
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia'
    
    - name: Install WiX Toolset
      run: |
        # Install .NET SDK first (required for WiX v5)
        choco install dotnet-sdk -y
        
        # Install WiX Toolset v5 as a .NET tool (recommended approach for v5)
        dotnet tool install --global wix --version 5.0.1
        
        # Verify installation
        wix --version
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Update version file for development build
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
        NUMERIC_VERSION: ${{ needs.setup-version.outputs.numeric_version }}
      run: |
        # Write numeric version for Windows RC compilation
        echo $env:NUMERIC_VERSION > app\version.txt
        
        # Create detailed version info file for reference  
        @"
        Semantic Version: $env:SEMANTIC_VERSION
        Numeric Version: $env:NUMERIC_VERSION
        Is Prerelease: ${{ needs.setup-version.outputs.is_prerelease }}
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        "@ | Out-File -FilePath "build_version_info.txt" -Encoding utf8
    
    - name: Build using build-artemis-arch.bat script
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Add Qt to PATH for the build script
        $env:PATH = "$env:Qt6_DIR\bin;$env:PATH"
        
        # Run our Artemis build script that handles everything
        cmd /c "scripts\build-artemis-arch.bat release"
        
        if ($LASTEXITCODE -ne 0) {
          echo "Build failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
    
    - name: Rename artifacts for development build
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Find the generated MSI and portable ZIP files
        $msiFile = Get-ChildItem -Path "build\installer-x64-release" -Filter "*.msi" | Select-Object -First 1
        $zipFile = Get-ChildItem -Path "build\installer-x64-release" -Filter "ArtemisPortable-*.zip" | Select-Object -First 1
        
        if ($msiFile) {
          # Rename MSI installer for Artemis using semantic version
          $newMsiName = "artemis-windows-installer-$env:SEMANTIC_VERSION.msi"
          Move-Item $msiFile.FullName $newMsiName
          echo "Created MSI installer: $newMsiName"
        }
        
        if ($zipFile) {
          # Rename portable ZIP for Artemis using semantic version
          $newZipName = "artemis-windows-portable-$env:SEMANTIC_VERSION.zip"
          Move-Item $zipFile.FullName $newZipName
          echo "Created portable ZIP: $newZipName"
        }
        
        # Create info file with semantic versioning
        @"
        Artemis Desktop Development Build
        Version: $env:SEMANTIC_VERSION
        Numeric Version: ${{ needs.setup-version.outputs.numeric_version }}
        Is Prerelease: ${{ needs.setup-version.outputs.is_prerelease }}
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Built: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        
        This build includes:
        - MSI Installer with proper dependency handling
        - Portable ZIP package  
        - All required Windows runtime dependencies
        "@ | Out-File -FilePath "build_info.txt" -Encoding utf8
    
    - name: Upload MSI Installer
      uses: actions/upload-artifact@v4
      with:
        name: artemis-windows-installer-${{ needs.setup-version.outputs.version }}
        path: artemis-windows-installer-${{ needs.setup-version.outputs.version }}.msi
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload Portable ZIP
      uses: actions/upload-artifact@v4
      with:
        name: artemis-windows-portable-${{ needs.setup-version.outputs.version }}
        path: artemis-windows-portable-${{ needs.setup-version.outputs.version }}.zip
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload Build Info
      uses: actions/upload-artifact@v4
      with:
        name: artemis-windows-build-info-${{ needs.setup-version.outputs.version }}
        path: build_info.txt
        retention-days: 30

  build-macos-dev:
    name: macOS Development Build
    needs: setup-version
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Display version info
      run: |
        echo "Using semantic version: ${{ needs.setup-version.outputs.version }}"
        echo "Using numeric version: ${{ needs.setup-version.outputs.numeric_version }}"
        echo "Is prerelease: ${{ needs.setup-version.outputs.is_prerelease }}"

    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'mac'
        target: 'desktop'
        modules: 'qtmultimedia'
    
    - name: Install dependencies
      run: |
        brew install create-dmg ffmpeg opus sdl2 sdl2_ttf
    
    - name: Clean any existing build
      run: |
        rm -f .qmake.stash .qmake.cache
        find . -name "Makefile*" -delete
        rm -rf moonlight-common-c/Makefile* moonlight-common-c/.qmake.stash
        rm -rf qmdnsengine/Makefile* qmdnsengine/.qmake.stash 
        rm -rf h264bitstream/Makefile* h264bitstream/.qmake.stash
        rm -rf soundio/Makefile* soundio/.qmake.stash
        rm -rf app/Makefile* app/.qmake.stash
    
    - name: Build
      run: |
        export PATH="$Qt6_DIR/bin:$PATH"
        export QMAKE="$Qt6_DIR/bin/qmake6"
        qmake6 moonlight-qt.pro CONFIG+=release CONFIG+=sdk_no_version_check
        make -j$(sysctl -n hw.ncpu)
    
    - name: Package macOS Development Build
      env:
        VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Create info file with semantic versioning
        cat > build_info.txt << EOF
        Artemis Desktop Development Build
        Version: $VERSION
        Numeric Version: ${{ needs.setup-version.outputs.numeric_version }}
        Is Prerelease: ${{ needs.setup-version.outputs.is_prerelease }}
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        EOF
        
        # Package with semantic version
        tar -czf artemis-macos-$VERSION.tar.gz -C app Moonlight.app -C .. build_info.txt
    
    - name: Upload Development Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-macos-${{ needs.setup-version.outputs.version }}
        path: artemis-macos-${{ needs.setup-version.outputs.version }}.tar.gz
        retention-days: 30

  build-linux-dev:
    name: Linux Development Build
    needs: setup-version
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: Display version info
      run: |
        echo "Using semantic version: ${{ needs.setup-version.outputs.version }}"
        echo "Using numeric version: ${{ needs.setup-version.outputs.numeric_version }}"
        echo "Is prerelease: ${{ needs.setup-version.outputs.is_prerelease }}"
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        modules: 'qtmultimedia'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libegl1-mesa-dev libgl1-mesa-dev libopus-dev libsdl2-dev \
          libsdl2-ttf-dev libssl-dev libavcodec-dev libavformat-dev \
          libswscale-dev libva-dev libvdpau-dev libxkbcommon-dev \
          wayland-protocols libdrm-dev nasm libgbm-dev \
          libfreetype6-dev libasound2-dev libdbus-1-dev \
          libgles2-mesa-dev libglu1-mesa-dev libibus-1.0-dev \
          libpulse-dev libudev-dev libx11-dev libxcursor-dev \
          libxext-dev libxi-dev libxinerama-dev libxrandr-dev \
          libxss-dev libxt-dev libxv-dev libxxf86vm-dev \
          libxcb-dri3-dev libx11-xcb-dev
    
    - name: Clean any existing build
      run: |
        rm -f .qmake.stash .qmake.cache
        find . -name "Makefile*" -delete
        rm -rf moonlight-common-c/Makefile* moonlight-common-c/.qmake.stash
        rm -rf qmdnsengine/Makefile* qmdnsengine/.qmake.stash 
        rm -rf h264bitstream/Makefile* h264bitstream/.qmake.stash
        rm -rf app/Makefile* app/.qmake.stash
    
    - name: Build
      run: |
        export PATH="$Qt6_DIR/bin:$PATH"
        export QMAKE="$Qt6_DIR/bin/qmake6"
        qmake6 moonlight-qt.pro CONFIG+=release
        make -j$(nproc)
    
    - name: Package Linux Development Build
      env:
        VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Create info file with semantic versioning
        cat > build_info.txt << EOF
        Artemis Desktop Development Build
        Version: $VERSION
        Numeric Version: ${{ needs.setup-version.outputs.numeric_version }}
        Is Prerelease: ${{ needs.setup-version.outputs.is_prerelease }}
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        EOF
        
        # Package with semantic version
        tar -czf artemis-linux-$VERSION.tar.gz -C app moonlight -C .. build_info.txt
    - name: Upload Development Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-linux-${{ needs.setup-version.outputs.version }}
        path: artemis-linux-${{ needs.setup-version.outputs.version }}.tar.gz
        retention-days: 30

  build-appimage-dev:
    name: AppImage Development Build
    needs: setup-version
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Display version info
      run: echo "Using development version ${{ needs.setup-version.outputs.version }}"
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        modules: 'qtmultimedia'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libegl1-mesa-dev libgl1-mesa-dev libopus-dev libsdl2-dev \
          libsdl2-ttf-dev libssl-dev libavcodec-dev libavformat-dev \
          libswscale-dev libva-dev libvdpau-dev libxkbcommon-dev \
          wayland-protocols libdrm-dev nasm libgbm-dev \
          libfreetype6-dev libasound2-dev libdbus-1-dev \
          libgles2-mesa-dev libglu1-mesa-dev libibus-1.0-dev \
          libpulse-dev libudev-dev libx11-dev libxcursor-dev \
          libxext-dev libxi-dev libxinerama-dev libxrandr-dev \
          libxss-dev libxt-dev libxv-dev libxxf86vm-dev \
          libxcb-dri3-dev libx11-xcb-dev file wget desktop-file-utils \
          libxcb-cursor-dev
    
    - name: Clean any existing build
      run: |
        rm -f .qmake.stash .qmake.cache
        find . -name "Makefile*" -delete
        rm -rf moonlight-common-c/Makefile* moonlight-common-c/.qmake.stash
        rm -rf qmdnsengine/Makefile* qmdnsengine/.qmake.stash 
        rm -rf h264bitstream/Makefile* h264bitstream/.qmake.stash
        rm -rf soundio/Makefile* soundio/.qmake.stash
        rm -rf app/Makefile* app/.qmake.stash
    
    - name: Build
      run: |
        export PATH="$Qt6_DIR/bin:$PATH"
        export QMAKE="$Qt6_DIR/bin/qmake6"
        # Clean any problematic files
        rm -rf AntiHooking/ || true
        rm -rf config.tests/SL/ || true
        rm -f app/test_*.cpp || true
        # Build with proper configuration
        qmake6 moonlight-qt.pro CONFIG+=release
        make -j$(nproc)
    
    - name: Verify build output
      run: |
        ls -la app/
        file app/moonlight || echo "moonlight binary not found"
        ldd app/moonlight || echo "ldd failed"
    
    - name: Create AppImage
      env:
          VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Download linuxdeploy and Qt plugin
        wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy*.AppImage
        
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        cp app/moonlight AppDir/usr/bin/artemis-dev
        
        # Create desktop file
        cat > AppDir/artemis-dev.desktop << 'EOF'
        [Desktop Entry]
        Type=Application
        Name=Artemis Desktop (Dev)
        Comment=Artemis Desktop Development Build
        Exec=artemis-dev
        Icon=artemis-dev
        Categories=Game;Network;
        StartupNotify=true
        EOF
        
        # Create a simple icon placeholder
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        convert -size 256x256 xc:blue -fill white -gravity center -pointsize 24 -annotate +0+0 "Artemis\nDev" AppDir/usr/share/icons/hicolor/256x256/apps/artemis-dev.png 2>/dev/null || {
          echo "Creating placeholder icon"
          touch AppDir/usr/share/icons/hicolor/256x256/apps/artemis-dev.png
        }
        
        # Create build info
        cat > AppDir/build_info.txt << EOF
        Artemis Desktop Development Build (AppImage)
        Version: $VERSION
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Built: $(date)
        EOF
        
        # Set environment variables for linuxdeploy
        export OUTPUT="artemis-appimage-${VERSION}-x86_64.AppImage"
        export QMAKE="$Qt6_DIR/bin/qmake6"
        export QML_SOURCES_PATH="$Qt6_DIR/qml"

        # Build AppImage
        ./linuxdeploy-x86_64.AppImage \
          --appdir AppDir \
          --executable AppDir/usr/bin/artemis-dev \
          --desktop-file AppDir/artemis-dev.desktop \
          --plugin qt \
          --output appimage
        
        # Verify and rename if necessary
        ls -la *.AppImage || echo "No AppImage files found"
        if [ ! -f "$OUTPUT" ]; then
          APPIMAGE_FILE=$(ls *.AppImage | head -n1)
          if [ -n "$APPIMAGE_FILE" ]; then
            mv "$APPIMAGE_FILE" "$OUTPUT"
            echo "Renamed $APPIMAGE_FILE to $OUTPUT"
          else
            echo "Error: No AppImage file was created"
            exit 1
          fi
        fi
        
        # Final verification
        chmod +x "$OUTPUT"
        ls -la "$OUTPUT"
        file "$OUTPUT"
    
    - name: Upload AppImage Development Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-appimage-${{ needs.setup-version.outputs.version }}
        path: artemis-appimage-${{ needs.setup-version.outputs.version }}-x86_64.AppImage
        retention-days: 30

  build-flatpak-dev:
    name: Flatpak Development Build
    needs: setup-version
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Display version info
      run: echo "Using development version ${{ needs.setup-version.outputs.version }}"
    
    - name: Install Flatpak and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y flatpak flatpak-builder
        sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        sudo flatpak install -y flathub org.freedesktop.Platform//23.08 org.freedesktop.Sdk//23.08 org.kde.Platform//6.6 org.kde.Sdk//6.6
    
    - name: Create Flatpak manifest
      run: |
        cat > com.artemisdesktop.ArtemisDesktopDev.yml << 'EOF'
        app-id: com.artemisdesktop.ArtemisDesktopDev
        runtime: org.kde.Platform
        runtime-version: '6.6'
        sdk: org.kde.Sdk
        command: artemis-dev
        finish-args:
          - --share=ipc
          - --socket=x11
          - --socket=wayland
          - --socket=pulseaudio
          - --share=network
          - --device=all
          - --filesystem=home
        modules:
          - name: opus
            sources:
              - type: archive
                url: https://downloads.xiph.org/releases/opus/opus-1.4.tar.gz
                sha256: c9b32b4253be5ae63d1ff16eea06b94b5f0f2951b7a02aceef58e3a3ce49c51f
          
          - name: sdl2
            sources:
              - type: archive
                url: https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-2.28.5.tar.gz
                sha256: 332cb37d0be20cb9541739c61f79bae5a477427d79ae85e352089afdaf6666e4
          
          - name: sdl2-ttf
            sources:
              - type: archive
                url: https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.20.2/SDL2_ttf-2.20.2.tar.gz
                sha256: 9dc71ed93487521b107a2c4a9ca6bf43fb62f6bddd5c26b055e6b91418a22053
          
          - name: artemis-desktop-dev
            buildsystem: simple
            build-commands:
              - rm -f .qmake.stash .qmake.cache
              - find . -name "Makefile*" -delete || true
              - rm -rf AntiHooking/ || true
              - rm -rf config.tests/SL/ || true
              - rm -f app/test_*.cpp || true
              - qmake6 moonlight-qt.pro CONFIG+=release
              - make -j$(nproc)
              - install -Dm755 app/moonlight /app/bin/artemis-dev
            sources:
              - type: dir
                path: .
            post-install:
              - |
                install -Dm644 /dev/stdin /app/share/applications/com.artemisdesktop.ArtemisDesktopDev.desktop << 'EOD'
                [Desktop Entry]
                Type=Application
                Name=Artemis Desktop (Dev)
                Comment=Artemis Desktop Development Build
                Exec=artemis-dev
                Icon=com.artemisdesktop.ArtemisDesktopDev
                Categories=Game;Network;
                EOD
        EOF
    
    - name: Build Flatpak
      env:
        VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        flatpak-builder --force-clean --repo=repo build-dir com.artemisdesktop.ArtemisDesktopDev.yml
        flatpak build-bundle repo artemis-flatpak-$VERSION.flatpak com.artemisdesktop.ArtemisDesktopDev
    
    - name: Upload Flatpak Development Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-flatpak-${{ needs.setup-version.outputs.version }}
        path: artemis-flatpak-${{ needs.setup-version.outputs.version }}.flatpak
        retention-days: 30

  build-steamdeck-dev:
    name: Steam Deck Development Build
    needs: setup-version
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Display version info
      run: echo "Using development version ${{ needs.setup-version.outputs.version }}"
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        modules: 'qtmultimedia'
    
    - name: Install Steam Deck specific dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libegl1-mesa-dev libgl1-mesa-dev libopus-dev libsdl2-dev \
          libsdl2-ttf-dev libssl-dev libavcodec-dev libavformat-dev \
          libswscale-dev libva-dev libvdpau-dev libxkbcommon-dev \
          wayland-protocols libdrm-dev nasm libgbm-dev \
          libfreetype6-dev libasound2-dev libdbus-1-dev \
          libgles2-mesa-dev libglu1-mesa-dev libibus-1.0-dev \
          libpulse-dev libudev-dev libx11-dev libxcursor-dev \
          libxext-dev libxi-dev libxinerama-dev libxrandr-dev \
          libxss-dev libxt-dev libxv-dev libxxf86vm-dev \
          libxcb-dri3-dev libx11-xcb-dev
    
    - name: Build for Steam Deck
      run: |
        export PATH="$Qt6_DIR/bin:$PATH"
        export QMAKE="$Qt6_DIR/bin/qmake6"
        # Build with Steam Deck optimizations
        qmake6 moonlight-qt.pro CONFIG+=release CONFIG+=steamdeck
        make -j$(nproc)
    
    - name: Package Steam Deck Development Build
      env:
        VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        mkdir -p steamdeck-package
        cp app/moonlight steamdeck-package/artemis-dev
        
        # Create Steam Deck specific files
        cat > steamdeck-package/artemis-dev.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Artemis Desktop (Dev)
        Comment=Artemis Desktop Development Build - Optimized for Steam Deck
        Exec=artemis-dev
        Icon=artemis-dev
        Categories=Game;Network;
        EOF
        
        # Create installation script for Steam Deck
        cat > steamdeck-package/install-steamdeck.sh << 'EOF'
        #!/bin/bash
        echo "Installing Artemis Desktop Development Build for Steam Deck..."
        
        # Create directories
        mkdir -p ~/.local/share/applications
        mkdir -p ~/.local/bin
        
        # Copy files
        cp artemis-dev ~/.local/bin/
        chmod +x ~/.local/bin/artemis-dev
        cp artemis-dev.desktop ~/.local/share/applications/
        
        echo "Installation complete!"
        echo "You can now find Artemis Desktop (Dev) in your applications menu."
        EOF
        
        chmod +x steamdeck-package/install-steamdeck.sh
        
        # Create build info
        cat > steamdeck-package/build_info.txt << EOF
        Artemis Desktop Development Build (Steam Deck)
        Version: $VERSION
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Built: $(date)
        
        Installation:
        1. Extract this archive
        2. Run: ./install-steamdeck.sh
        3. Find Artemis Desktop (Dev) in your applications
        EOF
        
        # Create README for Steam Deck users
        cat > steamdeck-package/README-SteamDeck.md << EOF
        # Artemis Desktop for Steam Deck (Development Build)
        
        ## Installation
        1. Extract this archive to a folder
        2. Open a terminal in that folder
        3. Run: \`./install-steamdeck.sh\`
        4. The app will be available in your applications menu
        
        ## Steam Deck Specific Notes
        - This build is optimized for Steam Deck's controls and display
        - Use the touchscreen or external mouse/keyboard for initial setup
        - Game mode streaming works best with the built-in controls
        
        ## Troubleshooting
        - If you have issues, try running from terminal: \`~/.local/bin/artemis-dev\`
        - Check the build_info.txt for version details
        EOF
        
        tar -czf artemis-steamdeck-$VERSION.tar.gz -C steamdeck-package .
    
    - name: Upload Steam Deck Development Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-steamdeck-${{ needs.setup-version.outputs.version }}
        path: artemis-steamdeck-${{ needs.setup-version.outputs.version }}.tar.gz
        retention-days: 30

  create-dev-release:
    name: Create Development Release
    needs: [setup-version, build-windows-dev, build-macos-dev, build-linux-dev, build-appimage-dev, build-flatpak-dev, build-steamdeck-dev]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'  # Only create releases for develop branch
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog
    
    - name: Display release version info
      run: |
        echo "Creating release with version: ${{ needs.setup-version.outputs.version }}"
        echo "Is prerelease: ${{ needs.setup-version.outputs.is_prerelease }}"

    - name: Create tag for release
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ needs.setup-version.outputs.version }}
        git push origin ${{ needs.setup-version.outputs.version }}

    - name: Generate Changelog
      id: changelog
      run: |
        CURRENT_VERSION="${{ needs.setup-version.outputs.version }}"
        PREV_TAG=$(git tag --sort=-creatordate | grep -v "$CURRENT_VERSION" | head -n1)
        if [ -z "$PREV_TAG" ]; then
          SINCE_DATE=$(date -d '7 days ago' '+%Y-%m-%d')
          echo "No previous release found. Getting commits since $SINCE_DATE"
          COMMITS=$(git log --since="$SINCE_DATE" --pretty=format:"%h|%s|%an|%ad" --date=short --no-merges)
        else
          echo "Getting commits since last release: $PREV_TAG"
          COMMITS=$(git log ${PREV_TAG}..$CURRENT_VERSION --pretty=format:"%h|%s|%an|%ad" --date=short --no-merges)
        fi
        FEATURES=""
        BUGFIXES=""
        IMPROVEMENTS=""
        OTHER=""
        while IFS='|' read -r hash subject author date; do
          if [ -z "$hash" ]; then continue; fi
          subject=$(echo "$subject" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          if echo "$subject" | grep -iE "^(feat|feature|add|implement|new)[:|\s]" > /dev/null; then
            FEATURES="${FEATURES}- ${subject} (${hash})\n"
          elif echo "$subject" | grep -iE "^(fix|bug|resolve|correct)[:|\s]" > /dev/null; then
            BUGFIXES="${BUGFIXES}- ${subject} (${hash})\n"
          elif echo "$subject" | grep -iE "^(improve|enhance|update|optimize|refactor)[:|\s]" > /dev/null; then
            IMPROVEMENTS="${IMPROVEMENTS}- ${subject} (${hash})\n"
          else
            OTHER="${OTHER}- ${subject} (${hash})\n"
          fi
        done <<< "$COMMITS"
        CHANGELOG="## 🚧 Development Build Changelog\n\n"
        [ ! -z "$FEATURES" ] && CHANGELOG="${CHANGELOG}### ✨ New Features\n${FEATURES}\n"
        [ ! -z "$BUGFIXES" ] && CHANGELOG="${CHANGELOG}### 🐛 Bug Fixes\n${BUGFIXES}\n"
        [ ! -z "$IMPROVEMENTS" ] && CHANGELOG="${CHANGELOG}### 🔧 Improvements\n${IMPROVEMENTS}\n"
        [ ! -z "$OTHER" ] && CHANGELOG="${CHANGELOG}### 📝 Other Changes\n${OTHER}\n"
        echo -e "$CHANGELOG" > changelog.md
        echo "Generated changelog:"
        cat changelog.md
        {
          echo 'changelog<<EOF'
          cat changelog.md
          echo EOF
        } >> $GITHUB_OUTPUT
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded files for debugging
      run: ls -R artifacts
    
    - name: Create Development Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.setup-version.outputs.version }}
        name: "🚧 Development Build ${{ needs.setup-version.outputs.version }}"
        body: |
          🚧 **Development Build** 🚧
          
          This is an automated development build from the `${{ github.ref_name }}` branch.
          
          **⚠️ Warning**: Development builds are unstable and intended for testing purposes only. Use at your own risk!
          
          ---
          
          ${{ steps.changelog.outputs.changelog }}
          
          ---
          
          ## 📋 Build Information
          - **Version**: `${{ needs.setup-version.outputs.version }}`
          - **Numeric Version**: `${{ needs.setup-version.outputs.numeric_version }}`
          - **Branch**: `${{ github.ref_name }}`
          - **Commit**: `${{ github.sha }}`
          - **Build**: #${{ github.run_number }}
          - **Built**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          
          ## 📥 Downloads
          Choose the appropriate build for your platform:
          
          | Platform | File | Notes |
          |----------|------|-------|
          | 🪟 Windows | `artemis-windows-${{ needs.setup-version.outputs.version }}.zip` | Standard Windows build |
          | 🍎 macOS | `artemis-macos-${{ needs.setup-version.outputs.version }}.tar.gz` | macOS app bundle |
          | 🐧 Linux | `artemis-linux-${{ needs.setup-version.outputs.version }}.tar.gz` | Generic Linux binary |
          | 📦 AppImage | `artemis-appimage-${{ needs.setup-version.outputs.version }}-x86_64.AppImage` | Portable Linux app |
          | 📱 Flatpak | `artemis-flatpak-${{ needs.setup-version.outputs.version }}.flatpak` | Sandboxed Linux app |
          | 🎮 Steam Deck | `artemis-steamdeck-${{ needs.setup-version.outputs.version }}.tar.gz` | Optimized for Steam Deck |
          
          ## 🔄 Installation
          1. Download the appropriate file for your platform
          2. Extract the archive
          3. Run the executable (may require additional setup on some platforms)
          
          ## 🐛 Found a Bug?
          Please report issues on our [GitHub Issues](https://github.com/${{ github.repository }}/issues) page.
        files: |
          artifacts/*/*
        prerelease: ${{ needs.setup-version.outputs.is_prerelease }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}