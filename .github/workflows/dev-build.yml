name: Development Build

# This workflow handles development builds with intelligent build skipping:
# - Feature branches: Build artifacts, no releases (testing only)  
# - Develop branch: Build artifacts + create development releases (when meaningful changes are merged)
# - Main/Master branch: ALWAYS build + create production releases (releases require fresh artifacts)
#
# Smart merge detection prevents redundant builds by:
# - Main/Master: Always builds (never skip releases!)
# - Detecting merge commits vs regular commits
# - For merges: Analyzing actual changes being merged (not just the merge commit)
# - For regular commits: Comparing against previous commit
# - Skipping builds when only documentation/config files changed (.md, .txt, .yml, .yaml, .github/)
# - Respecting [skip ci] or [ci skip] in commit messages (except on main/master)
#
# This ensures develop/main branches BUILD when feature branches are merged (as they should!)
# while still preventing redundant builds when no meaningful code changes exist.

on:
  push:
    branches: 
      - develop
      - dev
      - main
      - master
      - 'feature/**'
      - 'feat/**'
      - 'fix/**'
  workflow_dispatch:  # Allow manual triggering

env:
  QT_VERSION: '6.8.3'

jobs:
  setup-version:
    name: Setup Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      numeric_version: ${{ steps.version.outputs.numeric_version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      should_build: ${{ steps.check-changes.outputs.should_build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for proper versioning
      
      - name: Check for meaningful changes
        id: check-changes
        run: |
          # Always build on main/master branch (releases)
          if [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "master" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Always building on main/master branch for release"
            exit 0
          fi
          
          # Skip builds if commit message contains [skip ci] or [ci skip]
          if echo "${{ github.event.head_commit.message }}" | grep -E "\[(skip ci|ci skip)\]" > /dev/null; then
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Build skipped due to [skip ci] in commit message"
            exit 0
          fi
          
          # Check if this is a merge commit (has multiple parents)
          PARENT_COUNT=$(git rev-list --parents -n 1 HEAD | wc -w)
          PARENT_COUNT=$((PARENT_COUNT - 1))  # Subtract 1 because first item is the commit hash itself
          
          if [ "$PARENT_COUNT" -gt 1 ]; then
            echo "Detected merge commit with $PARENT_COUNT parents"
            
            # For merge commits, check the actual changes being merged
            # Compare against the first parent (the target branch before merge)
            FIRST_PARENT=$(git rev-parse HEAD^1)
            echo "Comparing changes against first parent: $FIRST_PARENT"
            
            # Get all changed files in this merge, excluding documentation/config files but allowing workflow changes
            CHANGED_FILES=$(git diff --name-only $FIRST_PARENT HEAD | grep -v -E "(\.md$|test.*\.txt$|README.*\.txt$|CHANGELOG.*\.txt$)" | grep -v -E "(\.yml$|\.yaml$)" | wc -l)
            WORKFLOW_FILES=$(git diff --name-only $FIRST_PARENT HEAD | grep -E "^\.github/workflows/.*\.(yml|yaml)$" | wc -l)
            TOTAL_MEANINGFUL=$((CHANGED_FILES + WORKFLOW_FILES))
            echo "Meaningful files changed in merge: $CHANGED_FILES"
            echo "Workflow files changed: $WORKFLOW_FILES"
            echo "Total meaningful changes: $TOTAL_MEANINGFUL"
            
            if [ "$TOTAL_MEANINGFUL" -eq 0 ]; then
              echo "should_build=false" >> $GITHUB_OUTPUT
              echo "Skipping build - merge contains no meaningful code changes"
              exit 0
            else
              echo "should_build=true" >> $GITHUB_OUTPUT
              echo "Build will proceed - merge contains $TOTAL_MEANINGFUL meaningful changes (code: $CHANGED_FILES, workflows: $WORKFLOW_FILES)"
              exit 0
            fi
          else
            echo "Regular commit (not a merge) - checking for meaningful changes"
            
            # For regular commits, check against previous commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -v -E "(\.md$|test.*\.txt$|README.*\.txt$|CHANGELOG.*\.txt$)" | grep -v -E "(\.yml$|\.yaml$)" | wc -l)
            WORKFLOW_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "^\.github/workflows/.*\.(yml|yaml)$" | wc -l)
            TOTAL_MEANINGFUL=$((CHANGED_FILES + WORKFLOW_FILES))
            echo "Meaningful files changed: $CHANGED_FILES"
            echo "Workflow files changed: $WORKFLOW_FILES" 
            echo "Total meaningful changes: $TOTAL_MEANINGFUL"
            
            if [ "$TOTAL_MEANINGFUL" -eq 0 ]; then
              echo "should_build=false" >> $GITHUB_OUTPUT
              echo "Skipping build - no meaningful code changes detected"
              exit 0
            fi
          fi
          
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "Build will proceed - meaningful changes detected (including code and/or workflow changes)"
      
      - name: Generate semantic version
        id: version
        run: |
          # Base version from app/version.txt
          BASE_VERSION=$(cat app/version.txt | tr -d '\n\r')
          
          # Get branch info
          BRANCH_NAME="${{ github.ref_name }}"
          BRANCH_SANITIZED=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
          
          # Get commit info
          COMMIT_SHORT="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHORT:0:7}"
          
          # Get timestamp info
          TIMESTAMP=$(date +"%Y%m%d")
          BUILD_NUMBER=$(date +"%H%M")
          
          # Determine if this is a prerelease
          IS_PRERELEASE="true"
          PRERELEASE_SUFFIX=""
          
          if [[ "$BRANCH_NAME" == "main" || "$BRANCH_NAME" == "master" ]]; then
            # Main branch = stable release
            VERSION="$BASE_VERSION"
            IS_PRERELEASE="false"
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            # Develop branch = development prerelease
            VERSION="$BASE_VERSION-dev.$TIMESTAMP.$BUILD_NUMBER+$COMMIT_SHORT"
            PRERELEASE_SUFFIX="dev"
          elif [[ "$BRANCH_NAME" =~ ^(feature|feat)/ ]]; then
            # Feature branch = feature prerelease
            FEATURE_NAME=$(echo "$BRANCH_NAME" | sed 's|^.*/||' | sed 's/[^a-zA-Z0-9._-]/-/g')
            VERSION="$BASE_VERSION-feature.$FEATURE_NAME.$TIMESTAMP.$BUILD_NUMBER+$COMMIT_SHORT"
            PRERELEASE_SUFFIX="feature"
          elif [[ "$BRANCH_NAME" =~ ^(hotfix|fix)/ ]]; then
            # Hotfix branch = hotfix prerelease
            VERSION="$BASE_VERSION-hotfix.$TIMESTAMP.$BUILD_NUMBER+$COMMIT_SHORT"
            PRERELEASE_SUFFIX="hotfix"
          else
            # Other branches = alpha prerelease
            VERSION="$BASE_VERSION-alpha.$BRANCH_SANITIZED.$TIMESTAMP.$BUILD_NUMBER+$COMMIT_SHORT"
            PRERELEASE_SUFFIX="alpha"
          fi
          
          # Create numeric version for Windows RC files (extract major.minor.patch + build number)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          NUMERIC_VERSION="$MAJOR.$MINOR.$PATCH.$BUILD_NUMBER"
          
          # Output all versions
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "numeric_version=$NUMERIC_VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Generated versions:"
          echo "  Semantic Version: $VERSION"
          echo "  Numeric Version: $NUMERIC_VERSION"
          echo "  Is Prerelease: $IS_PRERELEASE"
          echo "  Branch: $BRANCH_NAME"
  build-windows-x64-portable:
    name: Windows x64 Portable Build
    needs: setup-version
    runs-on: windows-latest
    if: needs.setup-version.outputs.should_build == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0  # Needed for version info
    
    - name: Display version info
      run: |
        echo "Using semantic version: ${{ needs.setup-version.outputs.version }}"
        echo "Using numeric version: ${{ needs.setup-version.outputs.numeric_version }}"
        echo "Is prerelease: ${{ needs.setup-version.outputs.is_prerelease }}"
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia'
      continue-on-error: true
      id: qt_install_primary
    
    - name: Retry Qt Installation (if failed)
      if: steps.qt_install_primary.outcome == 'failure'
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia'
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Update version file for development build
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
        NUMERIC_VERSION: ${{ needs.setup-version.outputs.numeric_version }}
      run: |
        # Write numeric version for Windows RC compilation
        echo $env:NUMERIC_VERSION > app\version.txt
    
    - name: Build portable package only
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Add Qt to PATH for the build script
        $env:PATH = "$env:Qt6_DIR\bin;$env:PATH"
        
        # Run our Artemis build script that handles everything
        cmd /c "scripts\build-artemis-arch.bat release"
        
        if ($LASTEXITCODE -ne 0) {
          echo "Build failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
    
    - name: Rename portable ZIP
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Find the generated portable ZIP file
        $zipFile = Get-ChildItem -Path "build\installer-x64-release" -Filter "ArtemisPortable-*.zip" | Select-Object -First 1
        
        if ($zipFile) {
          # Rename portable ZIP for Artemis using semantic version
          $newZipName = "artemis-windows-x64-portable-$env:SEMANTIC_VERSION.zip"
          Move-Item $zipFile.FullName $newZipName
          echo "Created x64 portable ZIP: $newZipName"
        } else {
          echo "ERROR: Portable ZIP not found"
          Get-ChildItem -Path "build\installer-x64-release" -Recurse
          exit 1
        }
    
    - name: Upload x64 Portable ZIP
      uses: actions/upload-artifact@v4
      with:
        name: artemis-windows-x64-portable-${{ needs.setup-version.outputs.version }}
        path: artemis-windows-x64-portable-${{ needs.setup-version.outputs.version }}.zip
        retention-days: 30
        if-no-files-found: warn

  build-windows-arm64-portable:
    name: Windows ARM64 Portable Build
    needs: setup-version
    runs-on: windows-latest
    if: needs.setup-version.outputs.should_build == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0  # Needed for version info
    
    - name: Display version info
      run: |
        echo "Using semantic version: ${{ needs.setup-version.outputs.version }}"
        echo "Using numeric version: ${{ needs.setup-version.outputs.numeric_version }}"
        echo "Is prerelease: ${{ needs.setup-version.outputs.is_prerelease }}"
    
    - name: Setup Qt Desktop (required for ARM64)
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia'
      continue-on-error: true
      id: qt_install_desktop
        
    - name: Setup Qt for ARM64
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}  # Use Qt 6.8.3 LTS which has ARM64 support
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_arm64_cross_compiled'  # Correct ARM64 architecture name
        set-env: false  # Don't let this override our Qt6_DIR - we'll set it manually
      continue-on-error: true
      id: qt_install_arm64
    
    - name: Retry Qt Desktop Installation (if failed)
      if: steps.qt_install_desktop.outcome == 'failure'
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia'
    
    - name: Retry Qt ARM64 Installation (if failed)
      if: steps.qt_install_arm64.outcome == 'failure'
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_arm64_cross_compiled'
        set-env: false
    
    - name: Setup MSVC for ARM64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_arm64  # Cross-compile from x64 host to ARM64 target
        
    - name: Verify MSVC ARM64 Setup
      run: |
        echo "MSVC Environment Variables:"
        echo "VSCMD_ARG_TGT_ARCH: $env:VSCMD_ARG_TGT_ARCH"
        echo "VSCMD_ARG_HOST_ARCH: $env:VSCMD_ARG_HOST_ARCH"
        echo "Platform: $env:Platform"
        echo "LIB: $($env:LIB -split ';' | Select-Object -First 3)"
        echo "INCLUDE: $($env:INCLUDE -split ';' | Select-Object -First 3)"
    
    - name: Update version file for development build
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
        NUMERIC_VERSION: ${{ needs.setup-version.outputs.numeric_version }}
      run: |
        # Write numeric version for Windows RC compilation
        echo $env:NUMERIC_VERSION > app\version.txt
    
    - name: Build ARM64 portable package only
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Find and set up Qt ARM64 environment
        echo "Setting up Qt ARM64 environment..."
        $qtArm64Path = "D:\a\artemis\Qt\6.8.3\msvc2022_arm64"
        
        if (-not (Test-Path $qtArm64Path)) {
          echo "ERROR: Qt ARM64 not found at expected path: $qtArm64Path"
          echo "Available Qt installations:"
          Get-ChildItem "D:\a\artemis\Qt\6.8.3" -ErrorAction SilentlyContinue | Select-Object Name
          exit 1
        }
        
        # Set Qt environment
        $env:Qt6_DIR = $qtArm64Path
        $env:PATH = "$qtArm64Path\bin;$env:PATH"
        
        echo "Qt ARM64 setup complete:"
        echo "  Qt6_DIR: $env:Qt6_DIR"
        echo "  qmake available: $(Test-Path "$qtArm64Path\bin\qmake.bat")"
        
        # Run the build script
        echo "Running build script for ARM64..."
        cmd /c "scripts\build-artemis-arch.bat release"
        
        $buildExitCode = $LASTEXITCODE
        echo "Build script completed with exit code: $buildExitCode"
        
        if ($buildExitCode -ne 0) {
          echo "ERROR: Build script failed with exit code $buildExitCode"
          exit $buildExitCode
        }
    
    - name: Rename ARM64 portable ZIP
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Find the generated portable ZIP file
        $zipFile = Get-ChildItem -Path "build\installer-arm64-release" -Filter "ArtemisPortable-*.zip" | Select-Object -First 1
        
        if ($zipFile) {
          # Rename portable ZIP for Artemis ARM64 using semantic version
          $newZipName = "artemis-windows-arm64-portable-$env:SEMANTIC_VERSION.zip"
          Move-Item $zipFile.FullName $newZipName
          echo "Created ARM64 portable ZIP: $newZipName"
        } else {
          echo "ERROR: ARM64 Portable ZIP not found"
          Get-ChildItem -Path "build\installer-arm64-release" -Recurse
          exit 1
        }
    
    - name: Upload ARM64 Portable ZIP
      uses: actions/upload-artifact@v4
      with:
        name: artemis-windows-arm64-portable-${{ needs.setup-version.outputs.version }}
        path: artemis-windows-arm64-portable-${{ needs.setup-version.outputs.version }}.zip
        retention-days: 30
        if-no-files-found: warn

  build-windows-universal-installer:
    name: Windows Universal Installer
    needs: setup-version
    runs-on: windows-latest
    if: needs.setup-version.outputs.should_build == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia'
      continue-on-error: true
      id: qt_install_universal_desktop
        
    - name: Setup Qt for ARM64
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_arm64_cross_compiled'
        set-env: false
      continue-on-error: true
      id: qt_install_universal_arm64
    
    - name: Retry Qt Desktop Installation (if failed)
      if: steps.qt_install_universal_desktop.outcome == 'failure'
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtmultimedia'
    
    - name: Retry Qt ARM64 Installation (if failed)
      if: steps.qt_install_universal_arm64.outcome == 'failure'
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_arm64_cross_compiled'
        set-env: false
    
    - name: Setup build environment
      run: |
        # Install .NET SDK first (required for WiX v5)
        choco install dotnet-sdk -y
        
        # Install WiX Toolset v5 as a .NET tool (recommended approach for v5)
        dotnet tool install --global wix --version 5.0.1
        
        # Verify installation
        wix --version
        
        # Also install Visual Studio Build Tools (includes MSBuild) for compatibility
        choco install visualstudio2022buildtools --package-parameters "--includeRecommended --includeOptional --quiet --wait" -y
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Setup MSVC for ARM64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_arm64
    
    - name: Update version file
      env:
        NUMERIC_VERSION: ${{ needs.setup-version.outputs.numeric_version }}
      run: |
        echo $env:NUMERIC_VERSION > app\version.txt

    - name: Build x64 MSI
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        $env:PATH = "$env:Qt6_DIR\bin;$env:PATH"
        cmd /c "scripts\build-artemis-arch.bat release"
        
        if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
        
        # Ensure MSI was created
        $msiFile = Get-ChildItem -Path "build\installer-x64-release" -Filter "*.msi" | Select-Object -First 1
        if (-not $msiFile) {
          echo "ERROR: x64 MSI not found in build\installer-x64-release"
          exit 1
        }
        
        echo "x64 MSI created successfully: $($msiFile.FullName)"
    
    - name: Build ARM64 MSI
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Set up Qt ARM64 environment
        $qtArm64Path = "D:\a\artemis\Qt\6.8.3\msvc2022_arm64"
        $env:Qt6_DIR = $qtArm64Path
        $env:PATH = "$qtArm64Path\bin;$env:PATH"
        
        cmd /c "scripts\build-artemis-arch.bat release"
        
        if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
        
        # Ensure MSI was created
        $msiFile = Get-ChildItem -Path "build\installer-arm64-release" -Filter "*.msi" | Select-Object -First 1
        if (-not $msiFile) {
          echo "ERROR: ARM64 MSI not found in build\installer-arm64-release"
          exit 1
        }
        
        echo "ARM64 MSI created successfully: $($msiFile.FullName)"
    
    - name: Generate Universal Bundle  
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
        NUMERIC_VERSION: ${{ needs.setup-version.outputs.numeric_version }}
      run: |
        # Prefer a purely numeric version for MSBuild/NuGet and WiX
        $msbuildVersion = $env:NUMERIC_VERSION
        if ([string]::IsNullOrWhiteSpace($msbuildVersion)) {
          # Fallback: extract up to 4 numeric segments from semantic version
          $match = [regex]::Match($env:SEMANTIC_VERSION, '\d+(?:\.\d+){2,3}')
          if ($match.Success) { $msbuildVersion = $match.Value } else { $msbuildVersion = '0.0.0.0' }
        }
        
        echo "Original semantic version: $env:SEMANTIC_VERSION"
        echo "MSBuild/WiX version: $msbuildVersion"
        
        # Update version file with MSBuild-compatible version
        echo $msbuildVersion > app\version.txt
        
        # Set environment variables that the WiX scripts expect
        $env:BUILD_CONFIG = "release"
        $env:BUILD_ROOT = $PWD
        
        # Restore and build with explicit version properties for WiX v5
        dotnet restore wix\ArtemisSetup\ArtemisSetup.wixproj
        
        $buildCmd = "dotnet build wix\ArtemisSetup\ArtemisSetup.wixproj --configuration Release --no-restore"
        $buildCmd += " -p:INSTALLER_FOLDER=build\installer-release"
        $buildCmd += " -p:BUILD_FOLDER=build\build-release"
        $buildCmd += " -p:BUILD_ROOT=$env:BUILD_ROOT"
        $buildCmd += " -p:Version=$msbuildVersion -p:WixVersion=$msbuildVersion -p:WixBundleVersion=$msbuildVersion"
        
        Write-Host "Running: $buildCmd"
        cmd /c $buildCmd
        
        if ($LASTEXITCODE -ne 0) {
          echo "Bundle generation failed with exit code $LASTEXITCODE"
          echo "Trying fallback approach with generate-artemis-bundle.bat script..."
          
          # Fallback to original script approach with version override
          cmd /c "scripts\generate-artemis-bundle.bat release $msbuildVersion"
          
          if ($LASTEXITCODE -ne 0) {
            echo "Fallback also failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
        }
    
    - name: Rename universal bundle
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Find the generated bundle
        $bundleFile = Get-ChildItem -Path "build\installer-release" -Filter "ArtemisSetup*.exe" | Select-Object -First 1
        
        if ($bundleFile) {
          # Rename universal bundle
          $newBundleName = "artemis-windows-universal-installer-$env:SEMANTIC_VERSION.exe"
          Move-Item $bundleFile.FullName $newBundleName
          echo "Created universal installer: $newBundleName"
        } else {
          echo "ERROR: Universal bundle not found"
          Get-ChildItem -Path "build\installer-release" -Recurse
          exit 1
        }
    
    - name: Upload Universal Installer
      uses: actions/upload-artifact@v4
      with:
        name: artemis-windows-universal-installer-${{ needs.setup-version.outputs.version }}
        path: artemis-windows-universal-installer-${{ needs.setup-version.outputs.version }}.exe
        retention-days: 30
        if-no-files-found: warn

  build-macos-dev:
    name: macOS Development Build
    needs: setup-version
    runs-on: macos-latest
    if: needs.setup-version.outputs.should_build == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Display version info
      run: |
        echo "Using semantic version: ${{ needs.setup-version.outputs.version }}"
        echo "Using numeric version: ${{ needs.setup-version.outputs.numeric_version }}"
        echo "Is prerelease: ${{ needs.setup-version.outputs.is_prerelease }}"

    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'mac'
        target: 'desktop'
        modules: 'qtmultimedia'
        
    - name: Set macOS deployment target for compatibility
      run: |
        echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV
        echo "Qt6_DIR=$Qt6_DIR" >> $GITHUB_ENV
    
    - name: Install dependencies
      run: |
        brew install create-dmg ffmpeg opus sdl2 sdl2_ttf
    
    - name: Clean any existing build
      run: |
        rm -f .qmake.stash .qmake.cache
        find . -name "Makefile*" -delete
        find . -name "*.moc" -delete
        find . -name "moc_*.cpp" -delete
        find . -name "moc_*.h" -delete
        rm -rf moonlight-common-c/Makefile* moonlight-common-c/.qmake.stash
        rm -rf qmdnsengine/Makefile* qmdnsengine/.qmake.stash 
        rm -rf h264bitstream/Makefile* h264bitstream/.qmake.stash
        rm -rf soundio/Makefile* soundio/.qmake.stash
        rm -rf app/Makefile* app/.qmake.stash
        rm -rf app/debug app/release
    
    - name: Build
      run: |
        export PATH="$Qt6_DIR/bin:$PATH"
        export QMAKE="$Qt6_DIR/bin/qmake6"
        export MACOSX_DEPLOYMENT_TARGET=14.0
        
        # Force a complete clean build to ensure MOC files are generated
        make clean || true
        qmake6 artemis.pro CONFIG+=release CONFIG+=sdk_no_version_check QMAKE_MACOSX_DEPLOYMENT_TARGET=14.0
        
        # Generate MOC files explicitly and ensure they're created before building
        make -j$(sysctl -n hw.ncpu) qmake_all
        
        # Force generation of specific problematic MOC files first
        cd app
        if [ -f Makefile.Release ]; then
          # Generate MOC headers explicitly
          make -f Makefile.Release compiler_moc_header_make_all || echo "MOC header generation completed"
          # Generate MOC source files explicitly  
          make -f Makefile.Release compiler_moc_source_make_all || echo "MOC source generation completed"
          
          # Verify critical MOC files exist, generate manually if needed
          # Generate into the source folder so #include "*.moc" resolves relative to the .cpp file
          if [ ! -f backend/computermanager.moc ]; then
            echo "Manually generating backend/computermanager.moc"
            "$Qt6_DIR/libexec/moc" backend/computermanager.cpp -o backend/computermanager.moc
          fi
          if [ ! -f backend/boxartmanager.moc ]; then
            echo "Manually generating backend/boxartmanager.moc"
            "$Qt6_DIR/libexec/moc" backend/boxartmanager.cpp -o backend/boxartmanager.moc
          fi
          if [ ! -f gui/computermodel.moc ]; then
            echo "Manually generating gui/computermodel.moc"
            "$Qt6_DIR/libexec/moc" gui/computermodel.cpp -o gui/computermodel.moc
          fi
        fi
        
        # Clean and rebuild all subprojects with consistent deployment target
        cd ..
        make clean || true
        
        # Build each subproject individually with deployment target
        for subdir in moonlight-common-c qmdnsengine h264bitstream soundio; do
          if [ -d "$subdir" ]; then
            echo "Building $subdir with deployment target..."
            cd "$subdir"
            make clean || true
            qmake6 *.pro CONFIG+=release QMAKE_MACOSX_DEPLOYMENT_TARGET=14.0
            make -j$(sysctl -n hw.ncpu)
            cd ..
          fi
        done
        
        # Build app sub-project to ensure .moc is picked up correctly
        cd app
        qmake6 app.pro CONFIG+=release QMAKE_MACOSX_DEPLOYMENT_TARGET=14.0
        make -j$(sysctl -n hw.ncpu) release
        cd ..
        
        # Final build
        qmake6 artemis.pro CONFIG+=release CONFIG+=sdk_no_version_check QMAKE_MACOSX_DEPLOYMENT_TARGET=14.0
        make -j$(sysctl -n hw.ncpu)
    
    - name: Package macOS Development Build
      env:
        VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Install create-dmg if not available
        if ! command -v create-dmg &> /dev/null; then
          echo "Installing create-dmg..."
          brew install create-dmg
        fi
        
        # Use the DMG generation script to create universal DMG
        # Ensure version is available for DMG naming
        echo "$VERSION" > app/version.txt
        
        # Run DMG generation with error handling
        DMG_OUTPUT="Artemis-${VERSION}.dmg"
        if ! ./scripts/generate-dmg.sh Release "$VERSION"; then
          echo "DMG generation failed, checking for common issues..."
          
          # Check if create-dmg is available
          create-dmg --help || echo "create-dmg not properly installed"
          
          # List what was actually created
          echo "Contents of build directory:"
          find build -name "*.dmg" -o -name "*.app" -o -name "Artemis*" | head -20
          
          # Try a simpler fallback DMG creation with proper .dmg extension
          echo "Attempting fallback DMG creation..."
          
          if [ -d "build/build-Release" ]; then
            # Use create-dmg directly with correct argument order
            echo "Found Artemis.app at app/Artemis.app"
            mkdir -p build/installer-Release
            # Simple approach using hdiutil which is more reliable
            if [ -d "app/Artemis.app" ]; then
              echo "Creating DMG with hdiutil..."
              hdiutil create -srcfolder app/Artemis.app -volname "Artemis" "build/installer-Release/Artemis-${VERSION}.dmg" || {
                echo "hdiutil failed, trying create-dmg with minimal options..."
                create-dmg \
                  --volname "Artemis" \
                  --no-internet-enable \
                  --app-drop-link 350 185 \
                  "build/installer-Release/Artemis-${VERSION}.dmg" \
                  "app/" || exit 1
              }
            else
              echo "Error: No Artemis.app found in app/ directory"
              exit 1
            fi
            cd build/build-Release
            # Look for the app bundle in the most likely locations
            if [ -d "app/Artemis.app" ]; then
              echo "Found Artemis.app at app/Artemis.app"
              # Create a simple DMG manually with proper filename
              mkdir -p ../installer-Release
              create-dmg --volname "Artemis-$VERSION" \
                --icon-size 80 \
                --icon "app/Artemis.app" 200 190 \
                --hide-extension "app/Artemis.app" \
                --app-drop-link 400 185 \
                "../installer-Release/Artemis-$VERSION.dmg" \
                "app/Artemis.app"
              cd ../..
            elif [ -d "Artemis.app" ]; then
              echo "Found Artemis.app at root level"
              # Create a simple DMG manually with proper filename
              mkdir -p ../installer-Release
              create-dmg --volname "Artemis-$VERSION" \
                --icon-size 80 \
                --icon "Artemis.app" 200 190 \
                --hide-extension "Artemis.app" \
                --app-drop-link 400 185 \
                "../installer-Release/Artemis-$VERSION.dmg" \
                "Artemis.app"
              cd ../..
            else
              echo "ERROR: Artemis.app not found in build/build-Release"
              echo "Available directories in build/build-Release:"
              find . -name "*.app" -type d | head -10
              exit 1
            fi
          else
            echo "ERROR: build/build-Release directory not found"
            exit 1
          fi
        fi
    
    - name: Upload macOS Universal DMG
      uses: actions/upload-artifact@v4
      with:
        name: artemis-macos-universal-${{ needs.setup-version.outputs.version }}
        path: build/installer-Release/Artemis-${{ needs.setup-version.outputs.version }}.dmg
        retention-days: 30

  build-linux-dev:
    name: Linux Development Build
    needs: setup-version
    runs-on: ubuntu-22.04
    if: needs.setup-version.outputs.should_build == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: Display version info
      run: |
        echo "Using semantic version: ${{ needs.setup-version.outputs.version }}"
        echo "Using numeric version: ${{ needs.setup-version.outputs.numeric_version }}"
        echo "Is prerelease: ${{ needs.setup-version.outputs.is_prerelease }}"
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        modules: 'qtmultimedia'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libegl1-mesa-dev libgl1-mesa-dev libopus-dev libsdl2-dev \
          libsdl2-ttf-dev libsdl2-ttf-2.0-0 libssl-dev libavcodec-dev libavformat-dev \
          libswscale-dev libva-dev libvdpau-dev libxkbcommon-dev \
          wayland-protocols libdrm-dev nasm libgbm-dev \
          libfreetype6-dev libasound2-dev libdbus-1-dev \
          libgles2-mesa-dev libglu1-mesa-dev libibus-1.0-dev \
          libpulse-dev libudev-dev libx11-dev libxcursor-dev \
          libxext-dev libxi-dev libxinerama-dev libxrandr-dev \
          libxss-dev libxt-dev libxv-dev libxxf86vm-dev \
          libxcb-dri3-dev libx11-xcb-dev
    
    - name: Clean any existing build
      run: |
        rm -f .qmake.stash .qmake.cache
        find . -name "Makefile*" -delete
        rm -rf moonlight-common-c/Makefile* moonlight-common-c/.qmake.stash
        rm -rf qmdnsengine/Makefile* qmdnsengine/.qmake.stash 
        rm -rf h264bitstream/Makefile* h264bitstream/.qmake.stash
        rm -rf app/Makefile* app/.qmake.stash
    
    - name: Build
      run: |
        export PATH="$Qt6_DIR/bin:$PATH"
        export QMAKE="$Qt6_DIR/bin/qmake6"
        qmake6 artemis.pro CONFIG+=release
        make -j$(nproc)
    
    
    - name: Create dependency bundle for Linux
      run: |
        echo "=== Creating dependency bundle ==="
        mkdir -p linux-package/lib
        mkdir -p linux-package/bin
        
        # Copy the main binary
        cp app/artemis linux-package/bin/
        
        # Bundle critical shared libraries that may not be available on all systems
        # Include SDL2 main library and SDL2_ttf which are commonly missing
        echo "Bundling SDL2 libraries..."
        ldd app/artemis | grep -E "(libSDL2-2\.0|libSDL2_ttf|libopus|libssl)" | while read -r line; do
          lib_path=$(echo "$line" | grep -o '/[^[:space:]]*')
          if [ -n "$lib_path" ] && [ -f "$lib_path" ]; then
            lib_name=$(basename "$lib_path")
            echo "Bundling library: $lib_name from $lib_path"
            cp "$lib_path" linux-package/lib/
          fi
        done
        
        # Also explicitly check for and bundle SDL2 main library if not caught above
        if [ ! -f "linux-package/lib/libSDL2-2.0.so.0" ]; then
          echo "Explicitly looking for SDL2 main library..."
          SDL2_LIB=$(find /usr/lib* /lib* -name "libSDL2-2.0.so.0" 2>/dev/null | head -1)
          if [ -n "$SDL2_LIB" ] && [ -f "$SDL2_LIB" ]; then
            echo "Found and bundling SDL2 main library: $SDL2_LIB"
            cp "$SDL2_LIB" linux-package/lib/
          fi
        fi
        
        # Create launch script that sets library path
        cat > linux-package/artemis << 'EOF'
        #!/bin/bash
        # Artemis Desktop launcher script
        
        # Resolve the actual directory where this script is located
        # This handles symlinks properly (e.g., ~/.local/bin/artemis -> ~/.local/share/artemis-desktop/artemis)
        if [ -L "${BASH_SOURCE[0]}" ]; then
            # Script is a symlink, resolve to actual location
            SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)"
        else
            # Script is not a symlink, use dirname normally
            SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        fi
        
        # Set library path and execute binary
        export LD_LIBRARY_PATH="$SCRIPT_DIR/lib:$LD_LIBRARY_PATH"
        exec "$SCRIPT_DIR/bin/artemis" "$@"
        EOF
        chmod +x linux-package/artemis
        
        # Create installation script
        cat > linux-package/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing Artemis Desktop..."
        
        # Install to local directory
        INSTALL_DIR="$HOME/.local/share/artemis-desktop"
        BIN_DIR="$HOME/.local/bin"
        
        mkdir -p "$INSTALL_DIR" "$BIN_DIR"
        
        # Copy all files
        cp -r * "$INSTALL_DIR/"
        
        # Create symlink to launcher
        ln -sf "$INSTALL_DIR/artemis" "$BIN_DIR/artemis"
        
        # Create desktop entry
        mkdir -p "$HOME/.local/share/applications"
        cat > "$HOME/.local/share/applications/artemis-desktop.desktop" << 'EOD'
        [Desktop Entry]
        Type=Application
        Name=Artemis Desktop
        Comment=Game streaming client
        Exec=artemis
        Icon=artemis-desktop
        Categories=Game;Network;
        EOD
        
        echo "Installation complete!"
        echo "You can run 'artemis' from terminal or find it in your applications menu."
        echo "If 'artemis' command is not found, add ~/.local/bin to your PATH"
        EOF
        chmod +x linux-package/install.sh
        
        # Copy library info for debugging
        ldd app/artemis > linux-package/library_dependencies.txt || echo "ldd failed" > linux-package/library_dependencies.txt
        
        echo "=== Linux package contents ==="
        ls -la linux-package/
        ls -la linux-package/lib/
    
    - name: Package Linux Development Build
      env:
        VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        # Create info file with semantic versioning
        cat > linux-package/build_info.txt << EOF
        Artemis Desktop Development Build (Linux)
        Version: $VERSION
        Numeric Version: ${{ needs.setup-version.outputs.numeric_version }}
        Is Prerelease: ${{ needs.setup-version.outputs.is_prerelease }}
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        Installation:
        1. Extract this archive
        2. Run: ./install.sh (installs to ~/.local/)
        3. Or run directly: ./artemis
        
        Manual dependencies (if needed):
        - SDL2_ttf: sudo apt install libsdl2-ttf-2.0-0
        - OpenSSL: sudo apt install libssl3
        - FFmpeg: sudo apt install libavcodec58 libavformat58
        EOF
        
        # Create README for users
        cat > linux-package/README.md << 'EOF'
        # Artemis Desktop - Linux Build
        
        ## Quick Installation
        
        1. Extract this archive
        2. Run the installer: `./install.sh`
        3. Launch from terminal: `artemis`
        
        ## Manual Installation
        
        1. Run directly: `./artemis`
        2. If you get library errors, install missing dependencies:
        
        ```bash
        # Ubuntu/Debian:
        sudo apt update
        sudo apt install libsdl2-ttf-2.0-0 libssl3 libavcodec58 libavformat58
        
        # Fedora/RHEL:
        sudo dnf install SDL2_ttf openssl-libs ffmpeg-libs
        
        # Arch Linux:
        sudo pacman -S sdl2_ttf openssl ffmpeg
        ```
        
        ## Troubleshooting
        
        - If you see "libSDL2_ttf-2.0.so.0: cannot open shared object file":
          - Install SDL2_ttf: `sudo apt install libsdl2-ttf-2.0-0`
        
        - Check library_dependencies.txt for full dependency list
        - Run with debugging: `LD_DEBUG=libs ./artemis`
        EOF
        
        # Package with semantic version
        tar -czf artemis-linux-$VERSION.tar.gz -C linux-package .
    - name: Upload Development Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-linux-${{ needs.setup-version.outputs.version }}
        path: artemis-linux-${{ needs.setup-version.outputs.version }}.tar.gz
        retention-days: 30

  build-appimage-dev:
    name: AppImage Development Build (Moonlight Compatible)
    needs: setup-version
    runs-on: ubuntu-22.04  # Use Ubuntu 22.04 since 20.04 is deprecated
    if: needs.setup-version.outputs.should_build == 'true'
    
    env:
      QT_VERSION: "5.15.7"  # Use Qt 5.15.7 for Ubuntu 22.04
      FFMPEG_CONFIGURE_ARGS: --enable-pic --disable-static --enable-shared --disable-all --enable-avcodec --enable-avformat --enable-swscale --enable-decoder=h264 --enable-decoder=hevc --enable-decoder=av1 --enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi --enable-hwaccel=av1_vaapi --enable-hwaccel=h264_vdpau --enable-hwaccel=hevc_vdpau --enable-hwaccel=av1_vdpau --enable-hwaccel=h264_vulkan --enable-hwaccel=hevc_vulkan --enable-hwaccel=av1_vulkan --enable-libdav1d --enable-decoder=libdav1d
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Get version
      id: version
      run: |
        VERSION=${{ needs.setup-version.outputs.version }}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"
    
    - name: Install Qt 5.15.7 from PPA (matching Moonlight)
      run: |
        sudo add-apt-repository ppa:s-schmeisser/opt-qt-5.15.7-jammy || true
        sudo apt update || true
        sudo apt install -y qt515base qt515quickcontrols2 qt515svg qt515wayland
        source /opt/qt515/bin/qt515-env.sh
        echo "Qt5_DIR=/opt/qt515" >> $GITHUB_ENV
        echo "PATH=/opt/qt515/bin:$PATH" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/qt515/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/opt/qt515/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    
    - name: Install Vulkan SDK and build dependencies (matching Moonlight)
      run: |
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.280-focal.list https://packages.lunarg.com/vulkan/1.3.280/lunarg-vulkan-1.3.280-focal.list
        sudo apt update || true
        sudo apt install -y python3-pip nasm libgbm-dev libdrm-dev libfreetype6-dev libasound2-dev libdbus-1-dev libegl1-mesa-dev libgl1-mesa-dev libgles2-mesa-dev libglu1-mesa-dev libibus-1.0-dev libpulse-dev libudev-dev libx11-dev libxcursor-dev libxext-dev libxi-dev libxinerama-dev libxkbcommon-dev libxrandr-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev libxcb-dri3-dev libx11-xcb-dev wayland-protocols libopus-dev libvdpau-dev vulkan-sdk
        sudo pip3 install meson
    
    - name: Build SDL2 from source (exact version used by Moonlight)
      run: |
        export SDL2_REV=86fd4ed83cdcf71fef6a57766b126e88f923acd3
        git clone https://github.com/libsdl-org/SDL.git SDL2
        cd SDL2
        git checkout $SDL2_REV
        ./configure
        make -j$(nproc)
        sudo make install
        cd ..
    
    - name: Build SDL2_ttf from source (exact version used by Moonlight)
      run: |
        export SDL2_TTF_VER=2.22.0
        wget https://github.com/libsdl-org/SDL_ttf/releases/download/release-$SDL2_TTF_VER/SDL2_ttf-$SDL2_TTF_VER.tar.gz
        tar -xf SDL2_ttf-$SDL2_TTF_VER.tar.gz
        cd SDL2_ttf-$SDL2_TTF_VER
        ./configure
        make -j$(nproc)
        sudo make install
        cd ..
    
    - name: Build libva from source (exact version used by Moonlight)
      run: |
        export LIBVA_VER=2.22.0
        git clone --branch $LIBVA_VER --depth 1 https://github.com/intel/libva.git
        cd libva
        ./autogen.sh
        ./configure --enable-x11 --enable-wayland
        make -j$(nproc)
        sudo make install
        cd ..
    
    - name: Build dav1d from source (exact version used by Moonlight)
      run: |
        export DAV1D_VER=1.5.0
        git clone --branch $DAV1D_VER --depth 1 https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        meson setup build -Ddefault_library=static -Dbuildtype=release -Denable_tools=false -Denable_tests=false
        ninja -C build
        sudo ninja install -C build
        sudo ldconfig
        cd ..
    
    - name: Build libplacebo from source with patches (exact version used by Moonlight)
      run: |
        export LIBPLACEBO_REV=v7.349.0
        git clone https://code.videolan.org/videolan/libplacebo.git
        cd libplacebo
        git checkout $LIBPLACEBO_REV
        # Apply the same patch that Moonlight uses
        if [ -f "../app/deploy/linux/appimage/*.patch" ]; then
          git apply ../app/deploy/linux/appimage/*.patch || echo "No patches to apply"
        fi
        git submodule update --init --recursive
        meson setup build -Dvulkan=enabled -Dopengl=disabled -Ddemos=false
        ninja -C build
        sudo ninja install -C build
        sudo ldconfig
        cd ..
    
    - name: Build FFmpeg from source (exact version and config used by Moonlight)
      run: |
        export FFMPEG_REV=87ccf995cb855f0baced9916928b7b48d8b6ed9d
        git clone https://github.com/FFmpeg/FFmpeg.git FFmpeg
        cd FFmpeg
        git checkout $FFMPEG_REV
        ./configure $FFMPEG_CONFIGURE_ARGS
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        cd ..
    
    - name: Download linuxdeployqt (exact version used by Moonlight)
      run: |
        mkdir -p $HOME/bin
        wget -O $HOME/bin/linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod a+x $HOME/bin/linuxdeployqt
        echo "$HOME/bin" >> $GITHUB_PATH
    
    - name: Build Artemis with exact Moonlight configuration
      run: |
        # Set Qt environment
        source /opt/qt515/bin/qt515-env.sh
        
        # Clean any existing build
        rm -rf build/
        
        # Build exactly like Moonlight (but skip the submodules they disable)
        git -c submodule.libs.update=none submodule update --init --recursive
        
        # Use their exact build script approach
        export PATH=$HOME/bin:$PATH
        scripts/build-appimage.sh
    
    - name: Verify AppImage size and contents
      run: |
        ls -lh build/installer-release/
        APPIMAGE_FILE=$(ls build/installer-release/*.AppImage | head -n1)
        if [ -f "$APPIMAGE_FILE" ]; then
          echo "AppImage created: $APPIMAGE_FILE"
          file "$APPIMAGE_FILE"
          echo "Size: $(du -h "$APPIMAGE_FILE" | cut -f1)"
          
          # Extract and check contents
          chmod +x "$APPIMAGE_FILE"
          "$APPIMAGE_FILE" --appimage-extract >/dev/null 2>&1 || echo "Extraction failed"
          if [ -d "squashfs-root" ]; then
            echo "AppImage contents size:"
            du -sh squashfs-root/
            echo "Key libraries bundled:"
            find squashfs-root -name "*.so*" -type f | grep -E "(Qt|SDL|ffmpeg|av|codec|va|vdpau)" | sort
          fi
        else
          echo "ERROR: No AppImage file found!"
          exit 1
        fi
    
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: artemis-appimage-${{ needs.setup-version.outputs.version }}
        path: build/installer-release/Artemis-${{ needs.setup-version.outputs.version }}-x86_64.AppImage
        retention-days: 30

  build-flatpak-dev:
    name: Flatpak Development Build
    needs: setup-version
    runs-on: ubuntu-22.04
    if: needs.setup-version.outputs.should_build == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Display version info
      run: echo "Using development version ${{ needs.setup-version.outputs.version }}"
    
    - name: Install Flatpak and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y flatpak flatpak-builder
        sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        sudo flatpak install -y flathub org.freedesktop.Platform//23.08 org.freedesktop.Sdk//23.08 org.kde.Platform//6.6 org.kde.Sdk//6.6

    - name: Create Flatpak manifest
      run: |
        cat > com.artemisdesktop.ArtemisDesktopDev.yml << 'EOF'
        app-id: com.artemisdesktop.ArtemisDesktopDev
        runtime: org.kde.Platform
        runtime-version: '6.6'
        sdk: org.kde.Sdk
        command: artemis-dev
        finish-args:
          - --share=ipc
          - --socket=x11
          - --socket=wayland
          - --socket=pulseaudio
          - --share=network
          - --filesystem=home
          # GPU and hardware acceleration access
          - --device=dri
          - --filesystem=/sys/dev/char:ro
          - --filesystem=/sys/devices/pci*:ro
          # GPU driver library access
          - --filesystem=/usr/lib/dri:ro
          - --filesystem=/usr/lib/x86_64-linux-gnu/dri:ro
          - --filesystem=/usr/lib64/dri:ro
          - --filesystem=/usr/share/drirc.d:ro
          # NVIDIA driver access
          - --filesystem=/usr/lib/nvidia:ro
          - --filesystem=/usr/lib/x86_64-linux-gnu/nvidia:ro
          - --filesystem=/usr/lib64/nvidia:ro
          # Mesa/Intel driver access  
          - --filesystem=/usr/lib/mesa:ro
          - --filesystem=/usr/lib/x86_64-linux-gnu/mesa:ro
          # VAAPI/VDPAU libraries
          - --filesystem=/usr/lib/libva:ro
          - --filesystem=/usr/lib/x86_64-linux-gnu/libva:ro
          - --filesystem=/usr/lib/vdpau:ro
          - --filesystem=/usr/lib/x86_64-linux-gnu/vdpau:ro
        modules:
          - name: opus
            sources:
              - type: archive
                url: https://downloads.xiph.org/releases/opus/opus-1.4.tar.gz
                sha256: c9b32b4253be5ae63d1ff16eea06b94b5f0f2951b7a02aceef58e3a3ce49c51f
          
          - name: sdl2
            sources:
              - type: archive
                url: https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-2.28.5.tar.gz
                sha256: 332cb37d0be20cb9541739c61f79bae5a477427d79ae85e352089afdaf6666e4
          
          - name: sdl2-ttf
            sources:
              - type: archive
                url: https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.20.2/SDL2_ttf-2.20.2.tar.gz
                sha256: 9dc71ed93487521b107a2c4a9ca6bf43fb62f6bddd5c26b055e6b91418a22053
          
          - name: artemis-desktop-dev
            buildsystem: simple
            build-commands:
              - rm -f .qmake.stash .qmake.cache
              - find . -name "Makefile*" -delete || true
              - rm -rf AntiHooking/ || true
              - rm -rf config.tests/SL/ || true
              - rm -f app/test_*.cpp || true
              - qmake6 artemis.pro CONFIG+=release
              - make -j$(nproc)
              - install -Dm755 app/artemis /app/bin/artemis-dev
            sources:
              - type: dir
                path: .
            post-install:
              - |
                install -Dm644 /dev/stdin /app/share/applications/com.artemisdesktop.ArtemisDesktopDev.desktop << 'EOD'
                [Desktop Entry]
                Type=Application
                Name=Artemis Desktop (Dev)
                Comment=Artemis Desktop Development Build
                Exec=artemis-dev
                Icon=com.artemisdesktop.ArtemisDesktopDev
                Categories=Game;Network;
                EOD
        EOF
    
    - name: Build Flatpak
      env:
        VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        flatpak-builder --force-clean --repo=repo build-dir com.artemisdesktop.ArtemisDesktopDev.yml
        flatpak build-bundle repo artemis-flatpak-$VERSION.flatpak com.artemisdesktop.ArtemisDesktopDev
    
    - name: Upload Flatpak Development Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-flatpak-${{ needs.setup-version.outputs.version }}
        path: artemis-flatpak-${{ needs.setup-version.outputs.version }}.flatpak
        retention-days: 30

  build-raspberry-pi-dev:
    name: Raspberry Pi ARM64 Development Build
    needs: setup-version
    runs-on: ubuntu-22.04-arm
    if: needs.setup-version.outputs.should_build == 'true'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: Display version info
      run: |
        echo "Using semantic version: ${{ needs.setup-version.outputs.version }}"
        echo "Using numeric version: ${{ needs.setup-version.outputs.numeric_version }}"
        echo "Is prerelease: ${{ needs.setup-version.outputs.is_prerelease }}"

    - name: Install ARM64 dependencies and Qt
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qt6-base-dev qt6-base-dev-tools qt6-declarative-dev qt6-declarative-dev-tools libqt6svg6-dev \
          libegl1-mesa-dev libgl1-mesa-dev libopus-dev libsdl2-dev libsdl2-ttf-dev \
          libssl-dev libavcodec-dev libavformat-dev libavutil-dev libswscale-dev \
          libva-dev libvdpau-dev libxkbcommon-dev wayland-protocols libdrm-dev nasm libgbm-dev \
          libfreetype6-dev libasound2-dev libdbus-1-dev libgles2-mesa-dev libglu1-mesa-dev \
          libibus-1.0-dev libpulse-dev libudev-dev libx11-dev libxcursor-dev libxext-dev \
          libxi-dev libxinerama-dev libxrandr-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev \
          libxcb-dri3-dev libx11-xcb-dev

    - name: Clean any existing build
      run: |
        rm -f .qmake.stash .qmake.cache
        find . -name "Makefile*" -delete || true

    - name: Build for Raspberry Pi ARM64
      run: |
        # Simple native ARM64 build - no cross-compilation needed!
        qmake6 artemis.pro CONFIG+=release
        make -j$(nproc)

    - name: Verify ARM64 binary
      run: |
        echo "Verifying ARM64 binary:"
        file app/artemis
        readelf -h app/artemis | grep Machine || true

    - name: Create installation package
      env:
        SEMANTIC_VERSION: ${{ needs.setup-version.outputs.version }}
      run: |
        mkdir -p artemis-package
        cp app/artemis artemis-package/
        
        # Create simple install script
        cat > artemis-package/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing Artemis Desktop for Raspberry Pi..."
        
        # Make binary executable
        chmod +x artemis
        
        # Copy to local bin directory
        mkdir -p ~/.local/bin
        cp artemis ~/.local/bin/
        
        # Create desktop entry
        mkdir -p ~/.local/share/applications
        cat > ~/.local/share/applications/artemis-desktop.desktop << 'EOD'
        [Desktop Entry]
        Type=Application
        Name=Artemis Desktop
        Comment=Game streaming client
        Exec=artemis
        Icon=artemis-desktop
        Categories=Game;Network;
        EOD
        
        echo "Installation complete!"
        echo "You can now run 'artemis' from terminal or find it in applications menu"
        EOF
        
        chmod +x artemis-package/install.sh
        
        # Create build info
        cat > artemis-package/build_info.txt << EOF
        Artemis Desktop Raspberry Pi ARM64 Build
        Version: $SEMANTIC_VERSION
        Built: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        Architecture: ARM64 (native build)
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        
        Quick Start:
        1. Extract this archive
        2. Run: ./install.sh
        3. Launch from terminal: artemis
        EOF

        # Create the zip file
        cd artemis-package
        zip -r "../artemis-raspberry-pi-arm64-$SEMANTIC_VERSION.zip" .
        cd ..

    - name: Upload Raspberry Pi Development Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artemis-raspberry-pi-arm64-${{ needs.setup-version.outputs.version }}
        path: artemis-raspberry-pi-arm64-${{ needs.setup-version.outputs.version }}.zip
        retention-days: 30


  create-dev-release:
    name: Create Development Release
    needs: [setup-version, build-windows-x64-portable, build-windows-arm64-portable, build-windows-universal-installer, build-macos-dev, build-linux-dev, build-appimage-dev, build-flatpak-dev, build-raspberry-pi-dev]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.setup-version.outputs.should_build == 'true'  # Create releases for develop/main branches when builds ran
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog
    
    - name: Display release version info
      run: |
        echo "Creating release with version: ${{ needs.setup-version.outputs.version }}"
        echo "Is prerelease: ${{ needs.setup-version.outputs.is_prerelease }}"

    - name: Create tag for release
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ needs.setup-version.outputs.version }}
        git push origin ${{ needs.setup-version.outputs.version }}

    - name: Generate Changelog
      id: changelog
      run: |
        CURRENT_VERSION="${{ needs.setup-version.outputs.version }}"
        PREV_TAG=$(git tag --sort=-creatordate | grep -v "$CURRENT_VERSION" | head -n1)
        if [ -z "$PREV_TAG" ]; then
          SINCE_DATE=$(date -d '7 days ago' '+%Y-%m-%d')
          echo "No previous release found. Getting commits since $SINCE_DATE"
          COMMITS=$(git log --since="$SINCE_DATE" --pretty=format:"%h|%s|%an|%ad" --date=short --no-merges)
        else
          echo "Getting commits since last release: $PREV_TAG"
          COMMITS=$(git log ${PREV_TAG}..$CURRENT_VERSION --pretty=format:"%h|%s|%an|%ad" --date=short --no-merges)
        fi
        FEATURES=""
        BUGFIXES=""
        IMPROVEMENTS=""
        OTHER=""
        while IFS='|' read -r hash subject author date; do
          if [ -z "$hash" ]; then continue; fi
          subject=$(echo "$subject" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          if echo "$subject" | grep -iE "^(feat|feature|add|implement|new)[:|\s]" > /dev/null; then
            FEATURES="${FEATURES}- ${subject} (${hash})\n"
          elif echo "$subject" | grep -iE "^(fix|bug|resolve|correct)[:|\s]" > /dev/null; then
            BUGFIXES="${BUGFIXES}- ${subject} (${hash})\n"
          elif echo "$subject" | grep -iE "^(improve|enhance|update|optimize|refactor)[:|\s]" > /dev/null; then
            IMPROVEMENTS="${IMPROVEMENTS}- ${subject} (${hash})\n"
          else
            OTHER="${OTHER}- ${subject} (${hash})\n"
          fi
        done <<< "$COMMITS"
        CHANGELOG="## 🚧 Development Build Changelog\n\n"
        [ ! -z "$FEATURES" ] && CHANGELOG="${CHANGELOG}### ✨ New Features\n${FEATURES}\n"
        [ ! -z "$BUGFIXES" ] && CHANGELOG="${CHANGELOG}### 🐛 Bug Fixes\n${BUGFIXES}\n"
        [ ! -z "$IMPROVEMENTS" ] && CHANGELOG="${CHANGELOG}### 🔧 Improvements\n${IMPROVEMENTS}\n"
        [ ! -z "$OTHER" ] && CHANGELOG="${CHANGELOG}### 📝 Other Changes\n${OTHER}\n"
        echo -e "$CHANGELOG" > changelog.md
       
        echo "Generated changelog:"
        cat changelog.md
        {
          echo 'changelog<<EOF'
          cat changelog.md
          echo EOF
        } >> $GITHUB_OUTPUT
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Check if artifacts exist (handle build skipping scenario)
      id: check-artifacts
      run: |
        if [ -d "artifacts" ] && [ "$(ls -A artifacts)" ]; then
          echo "artifacts_exist=true" >> $GITHUB_OUTPUT
          echo "Artifacts found - proceeding with release"
        else
          echo "artifacts_exist=false" >> $GITHUB_OUTPUT
          echo "No artifacts found - builds were skipped"
          echo "Will attempt to find and link to previous build with same commit"
          
          # Try to find a previous release with the same commit hash
          COMMIT_HASH="${{ github.sha }}"
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "Looking for existing artifacts with commit: $COMMIT_HASH"
        fi

    - name: Find and download previous artifacts if builds were skipped
     
      id: find-previous
      if: steps.check-artifacts.outputs.artifacts_exist == 'false'
      run: |
        echo "Searching for previous release with commit ${{ steps.check-artifacts.outputs.commit_hash }}"
        
        # Use GitHub API to find releases
        RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases?per_page=50")
        
        # Look for a release with matching commit (in tag or body)
        MATCHING_RELEASE=$(echo "$RELEASES" | jq -r '.[] | select(.body | contains("${{ steps.check-artifacts.outputs.commit_hash }}")) | .tag_name' | head -n1)
        
        if [ -n "$MATCHING_RELEASE" ] && [ "$MATCHING_RELEASE" != "null" ]; then
          echo "Found matching release: $MATCHING_RELEASE"
          echo "previous_release_tag=$MATCHING_RELEASE" >> $GITHUB_OUTPUT
          
          # Download assets from the matching release
          mkdir -p reused-artifacts
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$MATCHING_RELEASE")
          
          # Download all assets
          echo "$RELEASE_INFO" | jq -r '.assets[].browser_download_url' | while read -r url; do
            if [ -n "$url" ]; then
              filename=$(basename "$url")
              echo "Downloading: $filename"
              curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o "reused-artifacts/$filename" "$url"
            fi
          done
          
          echo "reused_artifacts_available=true" >> $GITHUB_OUTPUT
          ls -la reused-artifacts/
        else
          echo "No matching release found with commit ${{ steps.check-artifacts.outputs.commit_hash }}"
          echo "reused_artifacts_available=false" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List downloaded files for debugging
      if: steps.check-artifacts.outputs.artifacts_exist == 'true'
      run: ls -R artifacts
      
    - name: List reused artifacts for debugging
      if: steps.check-artifacts.outputs.artifacts_exist == 'false'
      run: |
        if [ -d "reused-artifacts" ]; then
          echo "Reused artifacts found:"
          ls -la reused-artifacts/
        else
          echo "No reused artifacts available"
        fi
    
    - name: Create Development Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.setup-version.outputs.version }}
        name: "${{ (github.ref_name == 'main' || github.ref_name == 'master') && '🚀 Production Release' || '🚧 Development Build' }} ${{ needs.setup-version.outputs.version }}"
        body: |
          ${{ (github.ref_name == 'main' || github.ref_name == 'master') && '🚀 **Production Release** 🚀

          This is an official production release of Artemis Desktop.

          **✅ Stable**: This release has been tested and is recommended for general use.' || '🚧 **Development Build** 🚧
          
          This is an automated development build from the `develop` branch.
          
          **⚠️ Warning**: Development builds are unstable and intended for testing purposes only. Use at your own risk!' }}
          
          ---
          
          ${{ steps.changelog.outputs.changelog }}
          
          ---
          
          ## 📋 Build Information
          - **Version**: `${{ needs.setup-version.outputs.version }}`
          - **Numeric Version**: `${{ needs.setup-version.outputs.numeric_version }}`
          - **Branch**: `${{ github.ref_name }}`
          - **Commit**: `${{ github.sha }}`
          - **Build**: #${{ github.run_number }}
          
          ## 🔄 Installation
          ${{ (steps.check-artifacts.outputs.artifacts_exist == 'true' || steps.find-previous.outputs.reused_artifacts_available == 'true') && '1. Download the appropriate file for your platform
          2. Extract the archive (if applicable)
          3. Run the executable (may require additional setup on some platforms)' || 'No installation files are available for this release. Please check recent releases or feature branches for builds.' }}
        files: |
          artifacts/**/*.zip
          artifacts/**/*.exe
          artifacts/**/*.dmg
          artifacts/**/*.tar.gz
          artifacts/**/*.AppImage
          artifacts/**/*.flatpak
          artifacts/**/artemis
          artifacts/**/build_info.txt
          artifacts/**/install.sh
        prerelease: ${{ needs.setup-version.outputs.is_prerelease }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}