name: AppImage Build

on:
  push:
    branches: [ fix/appimage-build-matching-moonlight ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  QT_VERSION: "5.15.4"
  FFMPEG_CONFIGURE_ARGS: --enable-pic --disable-static --enable-shared --disable-all --enable-avcodec --enable-avformat --enable-swscale --enable-decoder=h264 --enable-decoder=hevc --enable-decoder=av1 --enable-hwaccel=h264_vaapi --enable-hwaccel=hevc_vaapi --enable-hwaccel=av1_vaapi --enable-hwaccel=h264_vdpau --enable-hwaccel=hevc_vdpau --enable-hwaccel=av1_vdpau --enable-libdrm --enable-hwaccel=h264_vulkan --enable-hwaccel=hevc_vulkan --enable-hwaccel=av1_vulkan --enable-libdav1d --enable-decoder=libdav1d

jobs:
  build-appimage-moonlight-compat:
    name: AppImage
    runs-on: ubuntu-20.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    
    - name: Get version
      id: version
      run: |
        VERSION=$(cat app/version.txt)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"
    
    - name: Install Qt 5.15.4 from PPA
      run: |
        sudo add-apt-repository ppa:beineri/opt-qt-5.15.4-focal || true
        sudo apt update || true
        sudo apt install -y qt515base qt515quickcontrols2 qt515svg qt515wayland
        source /opt/qt515/bin/qt515-env.sh
        echo "Qt5_DIR=/opt/qt515" >> $GITHUB_ENV
        echo "PATH=/opt/qt515/bin:$PATH" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/qt515/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/opt/qt515/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    
    - name: Install Vulkan SDK and build dependencies
      run: |
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.280-focal.list https://packages.lunarg.com/vulkan/1.3.280/lunarg-vulkan-1.3.280-focal.list
        sudo apt update || true
        sudo apt install -y python3-pip nasm libgbm-dev libdrm-dev libfreetype6-dev libasound2-dev libdbus-1-dev libegl1-mesa-dev libgl1-mesa-dev libgles2-mesa-dev libglu1-mesa-dev libibus-1.0-dev libpulse-dev libudev-dev libx11-dev libxcursor-dev libxext-dev libxi-dev libxinerama-dev libxkbcommon-dev libxrandr-dev libxss-dev libxt-dev libxv-dev libxxf86vm-dev libxcb-dri3-dev libx11-xcb-dev wayland-protocols libopus-dev libvdpau-dev vulkan-sdk
        sudo pip3 install meson
    
    - name: Build SDL2 from source
      run: |
        export SDL2_REV=86fd4ed83cdcf71fef6a57766b126e88f923acd3
        git clone https://github.com/libsdl-org/SDL.git SDL2
        cd SDL2
        git checkout $SDL2_REV
        ./configure
        make -j$(nproc)
        sudo make install
        cd ..
    
    - name: Build SDL2_ttf from source
      run: |
        export SDL2_TTF_VER=2.22.0
        wget https://github.com/libsdl-org/SDL_ttf/releases/download/release-$SDL2_TTF_VER/SDL2_ttf-$SDL2_TTF_VER.tar.gz
        tar -xf SDL2_ttf-$SDL2_TTF_VER.tar.gz
        cd SDL2_ttf-$SDL2_TTF_VER
        ./configure
        make -j$(nproc)
        sudo make install
        cd ..
    
    - name: Build libva from source
      run: |
        export LIBVA_VER=2.22.0
        git clone --branch $LIBVA_VER --depth 1 https://github.com/intel/libva.git
        cd libva
        ./autogen.sh
        ./configure --enable-x11 --enable-wayland
        make -j$(nproc)
        sudo make install
        cd ..
    
    - name: Build dav1d from source
      run: |
        export DAV1D_VER=1.5.0
        git clone --branch $DAV1D_VER --depth 1 https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        meson setup build -Ddefault_library=static -Dbuildtype=release -Denable_tools=false -Denable_tests=false
        ninja -C build
        sudo ninja install -C build
        sudo ldconfig
        cd ..
    
    - name: Build libplacebo from source with patches
      run: |
        export LIBPLACEBO_REV=v7.349.0
        git clone https://code.videolan.org/videolan/libplacebo.git
        cd libplacebo
        git checkout $LIBPLACEBO_REV
        # Apply the same patch that Moonlight uses
        if [ -f "../app/deploy/linux/appimage/*.patch" ]; then
          git apply ../app/deploy/linux/appimage/*.patch || echo "No patches to apply"
        fi
        git submodule update --init --recursive
        meson setup build -Dvulkan=enabled -Dopengl=disabled -Ddemos=false
        ninja -C build
        sudo ninja install -C build
        sudo ldconfig
        cd ..
    
    - name: Build FFmpeg from source
      run: |
        export FFMPEG_REV=87ccf995cb855f0baced9916928b7b48d8b6ed9d
        git clone https://github.com/FFmpeg/FFmpeg.git FFmpeg
        cd FFmpeg
        git checkout $FFMPEG_REV
        ./configure $FFMPEG_CONFIGURE_ARGS
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        cd ..
    
    - name: Download linuxdeployqt
      run: |
        mkdir -p $HOME/bin
        wget -O $HOME/bin/linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod a+x $HOME/bin/linuxdeployqt
        echo "$HOME/bin" >> $GITHUB_PATH
    
    - name: Build Artemis
      run: |
        # Set Qt environment
        source /opt/qt515/bin/qt515-env.sh
        
        # Clean any existing build
        rm -rf build/
        
        # Build exactly like Moonlight (but skip the submodules they disable)
        git -c submodule.libs.update=none submodule update --init --recursive
        
        # Use their exact build script approach
        export PATH=$HOME/bin:$PATH
        scripts/build-appimage.sh
    
    - name: Verify AppImage size and contents
      run: |
        ls -lh build/installer-release/
        APPIMAGE_FILE=$(ls build/installer-release/*.AppImage | head -n1)
        if [ -f "$APPIMAGE_FILE" ]; then
          echo "AppImage created: $APPIMAGE_FILE"
          file "$APPIMAGE_FILE"
          echo "Size: $(du -h "$APPIMAGE_FILE" | cut -f1)"
          
          # Extract and check contents
          chmod +x "$APPIMAGE_FILE"
          "$APPIMAGE_FILE" --appimage-extract >/dev/null 2>&1 || echo "Extraction failed"
          if [ -d "squashfs-root" ]; then
            echo "AppImage contents size:"
            du -sh squashfs-root/
            echo "Key libraries bundled:"
            find squashfs-root -name "*.so*" -type f | grep -E "(Qt|SDL|ffmpeg|av|codec|va|vdpau)" | sort
          fi
        else
          echo "ERROR: No AppImage file found!"
          exit 1
        fi
    
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: artemis-appimage-moonlight-compat-${{ steps.version.outputs.version }}
        path: build/installer-release/Artemis-${{ steps.version.outputs.version }}-x86_64.AppImage
        retention-days: 30
